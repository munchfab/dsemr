// Generated by rstantools.  Do not edit by hand.

/*
    dsemr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dsemr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dsemr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_manifest_AR_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 163> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 41, column 2 to column 30)",
  " (in 'string', line 42, column 2 to column 34)",
  " (in 'string', line 43, column 2 to column 35)",
  " (in 'string', line 44, column 2 to column 26)",
  " (in 'string', line 45, column 2 to column 35)",
  " (in 'string', line 47, column 2 to column 31)",
  " (in 'string', line 48, column 2 to column 33)",
  " (in 'string', line 49, column 2 to column 24)",
  " (in 'string', line 53, column 2 to column 26)",
  " (in 'string', line 56, column 2 to column 37)",
  " (in 'string', line 58, column 2 to column 24)",
  " (in 'string', line 60, column 2 to column 30)",
  " (in 'string', line 139, column 2 to column 34)",
  " (in 'string', line 140, column 2 to column 33)",
  " (in 'string', line 141, column 2 to column 31)",
  " (in 'string', line 142, column 2 to column 21)",
  " (in 'string', line 155, column 2 to column 14)",
  " (in 'string', line 156, column 2 to column 26)",
  " (in 'string', line 62, column 2 to column 21)",
  " (in 'string', line 66, column 4 to column 27)",
  " (in 'string', line 65, column 9 to line 67, column 3)",
  " (in 'string', line 64, column 4 to column 44)",
  " (in 'string', line 63, column 26 to line 65, column 3)",
  " (in 'string', line 63, column 2 to line 67, column 3)",
  " (in 'string', line 69, column 2 to column 14)",
  " (in 'string', line 71, column 4 to column 38)",
  " (in 'string', line 70, column 18 to line 72, column 3)",
  " (in 'string', line 70, column 2 to line 72, column 3)",
  " (in 'string', line 79, column 8 to column 61)",
  " (in 'string', line 78, column 13 to line 80, column 7)",
  " (in 'string', line 77, column 8 to column 130)",
  " (in 'string', line 76, column 27 to line 78, column 7)",
  " (in 'string', line 76, column 6 to line 80, column 7)",
  " (in 'string', line 75, column 48 to line 81, column 5)",
  " (in 'string', line 75, column 4 to line 81, column 5)",
  " (in 'string', line 83, column 6 to column 66)",
  " (in 'string', line 82, column 33 to line 84, column 5)",
  " (in 'string', line 82, column 4 to line 84, column 5)",
  " (in 'string', line 74, column 16 to line 85, column 3)",
  " (in 'string', line 74, column 2 to line 85, column 3)",
  " (in 'string', line 144, column 2 to column 47)",
  " (in 'string', line 145, column 2 to column 50)",
  " (in 'string', line 149, column 4 to column 58)",
  " (in 'string', line 150, column 4 to column 76)",
  " (in 'string', line 148, column 26 to line 152, column 5)",
  " (in 'string', line 148, column 4 to line 152, column 5)",
  " (in 'string', line 147, column 17 to line 153, column 3)",
  " (in 'string', line 147, column 2 to line 153, column 3)",
  " (in 'string', line 162, column 6 to column 28)",
  " (in 'string', line 163, column 6 to column 148)",
  " (in 'string', line 161, column 11 to line 164, column 5)",
  " (in 'string', line 159, column 6 to column 28)",
  " (in 'string', line 160, column 6 to column 149)",
  " (in 'string', line 158, column 29 to line 161, column 5)",
  " (in 'string', line 158, column 4 to line 164, column 5)",
  " (in 'string', line 165, column 4 to column 33)",
  " (in 'string', line 157, column 18 to line 166, column 3)",
  " (in 'string', line 157, column 2 to line 166, column 3)",
  " (in 'string', line 88, column 2 to column 14)",
  " (in 'string', line 89, column 9 to column 17)",
  " (in 'string', line 89, column 19 to column 27)",
  " (in 'string', line 89, column 2 to column 79)",
  " (in 'string', line 91, column 2 to column 27)",
  " (in 'string', line 93, column 2 to column 24)",
  " (in 'string', line 100, column 6 to column 38)",
  " (in 'string', line 99, column 13 to line 101, column 7)",
  " (in 'string', line 98, column 8 to column 41)",
  " (in 'string', line 97, column 19 to line 99, column 7)",
  " (in 'string', line 97, column 6 to line 101, column 7)",
  " (in 'string', line 96, column 29 to line 102, column 5)",
  " (in 'string', line 96, column 4 to line 102, column 5)",
  " (in 'string', line 95, column 24 to line 103, column 3)",
  " (in 'string', line 95, column 2 to line 103, column 3)",
  " (in 'string', line 111, column 6 to column 36)",
  " (in 'string', line 112, column 6 to column 32)",
  " (in 'string', line 113, column 6 to column 33)",
  " (in 'string', line 110, column 11 to line 114, column 5)",
  " (in 'string', line 107, column 6 to column 35)",
  " (in 'string', line 108, column 6 to column 31)",
  " (in 'string', line 109, column 6 to column 31)",
  " (in 'string', line 106, column 20 to line 110, column 5)",
  " (in 'string', line 106, column 4 to line 114, column 5)",
  " (in 'string', line 105, column 17 to line 115, column 3)",
  " (in 'string', line 105, column 2 to line 115, column 3)",
  " (in 'string', line 118, column 4 to column 64)",
  " (in 'string', line 119, column 12 to column 24)",
  " (in 'string', line 119, column 4 to column 31)",
  " (in 'string', line 120, column 4 to column 87)",
  " (in 'string', line 125, column 6 to column 73)",
  " (in 'string', line 124, column 11 to line 126, column 5)",
  " (in 'string', line 123, column 6 to column 76)",
  " (in 'string', line 122, column 29 to line 124, column 5)",
  " (in 'string', line 122, column 4 to line 126, column 5)",
  " (in 'string', line 128, column 4 to column 33)",
  " (in 'string', line 116, column 18 to line 129, column 5)",
  " (in 'string', line 116, column 2 to line 129, column 5)",
  " (in 'string', line 133, column 4 to column 72)",
  " (in 'string', line 132, column 24 to line 135, column 5)",
  " (in 'string', line 132, column 4 to line 135, column 5)",
  " (in 'string', line 131, column 17 to line 136, column 3)",
  " (in 'string', line 131, column 2 to line 136, column 3)",
  " (in 'string', line 3, column 2 to column 17)",
  " (in 'string', line 4, column 2 to column 18)",
  " (in 'string', line 5, column 2 to column 21)",
  " (in 'string', line 6, column 8 to column 9)",
  " (in 'string', line 6, column 2 to column 33)",
  " (in 'string', line 7, column 9 to column 14)",
  " (in 'string', line 7, column 2 to column 18)",
  " (in 'string', line 10, column 2 to column 39)",
  " (in 'string', line 12, column 2 to column 12)",
  " (in 'string', line 13, column 9 to column 10)",
  " (in 'string', line 13, column 12 to column 17)",
  " (in 'string', line 13, column 2 to column 21)",
  " (in 'string', line 15, column 2 to column 12)",
  " (in 'string', line 16, column 2 to column 17)",
  " (in 'string', line 17, column 2 to column 19)",
  " (in 'string', line 18, column 24 to column 47)",
  " (in 'string', line 18, column 2 to column 49)",
  " (in 'string', line 19, column 8 to column 13)",
  " (in 'string', line 19, column 22 to column 23)",
  " (in 'string', line 19, column 2 to column 29)",
  " (in 'string', line 20, column 9 to column 10)",
  " (in 'string', line 20, column 12 to column 24)",
  " (in 'string', line 20, column 2 to column 37)",
  " (in 'string', line 21, column 2 to column 35)",
  " (in 'string', line 24, column 2 to column 22)",
  " (in 'string', line 25, column 18 to column 24)",
  " (in 'string', line 25, column 2 to column 26)",
  " (in 'string', line 28, column 2 to column 15)",
  " (in 'string', line 29, column 2 to column 13)",
  " (in 'string', line 35, column 6 to column 19)",
  " (in 'string', line 36, column 6 to column 17)",
  " (in 'string', line 34, column 11 to line 37, column 5)",
  " (in 'string', line 32, column 4 to column 17)",
  " (in 'string', line 33, column 4 to column 15)",
  " (in 'string', line 31, column 27 to line 34, column 5)",
  " (in 'string', line 31, column 2 to line 37, column 5)",
  " (in 'string', line 41, column 8 to column 9)",
  " (in 'string', line 41, column 18 to column 26)",
  " (in 'string', line 42, column 18 to column 26)",
  " (in 'string', line 43, column 23 to column 31)",
  " (in 'string', line 44, column 9 to column 15)",
  " (in 'string', line 45, column 9 to column 14)",
  " (in 'string', line 45, column 16 to column 24)",
  " (in 'string', line 47, column 9 to column 14)",
  " (in 'string', line 47, column 16 to column 26)",
  " (in 'string', line 48, column 26 to column 31)",
  " (in 'string', line 49, column 17 to column 22)",
  " (in 'string', line 53, column 9 to column 10)",
  " (in 'string', line 53, column 12 to column 20)",
  " (in 'string', line 56, column 20 to column 26)",
  " (in 'string', line 58, column 9 to column 14)",
  " (in 'string', line 60, column 9 to column 10)",
  " (in 'string', line 60, column 11 to column 21)",
  " (in 'string', line 139, column 9 to column 17)",
  " (in 'string', line 139, column 18 to column 26)",
  " (in 'string', line 140, column 9 to column 17)",
  " (in 'string', line 140, column 18 to column 26)",
  " (in 'string', line 141, column 8 to column 13)",
  " (in 'string', line 141, column 22 to column 23)",
  " (in 'string', line 142, column 14 to column 19)",
  " (in 'string', line 156, column 8 to column 13)"};
#include <stan_meta_header.hpp>
class model_manifest_AR final : public model_base_crtp<model_manifest_AR> {
private:
  int N;
  int TP;
  int N_obs;
  std::vector<int> N_obs_id;
  Eigen::Matrix<double,-1,1> y_data__;
  int logv_is_random;
  int n_cov;
  Eigen::Matrix<double,-1,-1> W_data__;
  int n_out;
  int n_out_pred;
  int n_out_pred_b;
  std::vector<std::vector<int>> out_pred_which;
  std::vector<Eigen::Matrix<double,-1,1>> out;
  Eigen::Matrix<double,-1,-1> out_pred_b_data__;
  int out_is_std;
  int N_miss;
  std::vector<std::vector<int>> pos_miss;
  int n_random;
  int n_inno;
  Eigen::Map<Eigen::Matrix<double,-1,1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> W{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> out_pred_b{nullptr, 0, 0};
public:
  ~model_manifest_AR() {}
  model_manifest_AR(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_manifest_AR_namespace::model_manifest_AR";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 102;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 102;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 103;
      context__.validate_dims("data initialization", "TP", "int",
        std::vector<size_t>{});
      TP = std::numeric_limits<int>::min();
      current_statement__ = 103;
      TP = context__.vals_i("TP")[(1 - 1)];
      current_statement__ = 103;
      stan::math::check_greater_or_equal(function__, "TP", TP, 1);
      current_statement__ = 104;
      context__.validate_dims("data initialization", "N_obs", "int",
        std::vector<size_t>{});
      N_obs = std::numeric_limits<int>::min();
      current_statement__ = 104;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("N_obs_id", "N", N);
      current_statement__ = 106;
      context__.validate_dims("data initialization", "N_obs_id", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      N_obs_id = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 106;
      N_obs_id = context__.vals_i("N_obs_id");
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "N_obs_id", N_obs_id, 1);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 108;
      context__.validate_dims("data initialization", "y", "double",
        std::vector<size_t>{static_cast<size_t>(N_obs)});
      y_data__ = Eigen::Matrix<double,-1,1>::Constant(N_obs,
                   std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double,-1,1>>(y_data__.data(), N_obs);
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 108;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 108;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 108;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 109;
      context__.validate_dims("data initialization", "logv_is_random", "int",
        std::vector<size_t>{});
      logv_is_random = std::numeric_limits<int>::min();
      current_statement__ = 109;
      logv_is_random = context__.vals_i("logv_is_random")[(1 - 1)];
      current_statement__ = 109;
      stan::math::check_greater_or_equal(function__, "logv_is_random",
        logv_is_random, 0);
      current_statement__ = 109;
      stan::math::check_less_or_equal(function__, "logv_is_random",
        logv_is_random, 1);
      current_statement__ = 110;
      context__.validate_dims("data initialization", "n_cov", "int",
        std::vector<size_t>{});
      n_cov = std::numeric_limits<int>::min();
      current_statement__ = 110;
      n_cov = context__.vals_i("n_cov")[(1 - 1)];
      current_statement__ = 111;
      stan::math::validate_non_negative_index("W", "N", N);
      current_statement__ = 112;
      stan::math::validate_non_negative_index("W", "n_cov", n_cov);
      current_statement__ = 113;
      context__.validate_dims("data initialization", "W", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(n_cov)});
      W_data__ = Eigen::Matrix<double,-1,-1>::Constant(N, n_cov,
                   std::numeric_limits<double>::quiet_NaN());
      new (&W) Eigen::Map<Eigen::Matrix<double,-1,-1>>(W_data__.data(), N,
        n_cov);
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 113;
        W_flat__ = context__.vals_r("W");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= n_cov; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 113;
            stan::model::assign(W, W_flat__[(pos__ - 1)],
              "assigning variable W", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 113;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 114;
      context__.validate_dims("data initialization", "n_out", "int",
        std::vector<size_t>{});
      n_out = std::numeric_limits<int>::min();
      current_statement__ = 114;
      n_out = context__.vals_i("n_out")[(1 - 1)];
      current_statement__ = 115;
      context__.validate_dims("data initialization", "n_out_pred", "int",
        std::vector<size_t>{});
      n_out_pred = std::numeric_limits<int>::min();
      current_statement__ = 115;
      n_out_pred = context__.vals_i("n_out_pred")[(1 - 1)];
      current_statement__ = 116;
      context__.validate_dims("data initialization", "n_out_pred_b", "int",
        std::vector<size_t>{});
      n_out_pred_b = std::numeric_limits<int>::min();
      current_statement__ = 116;
      n_out_pred_b = context__.vals_i("n_out_pred_b")[(1 - 1)];
      current_statement__ = 117;
      stan::math::validate_non_negative_index("out_pred_which",
        "n_out_pred - n_out_pred_b", (n_out_pred - n_out_pred_b));
      current_statement__ = 118;
      context__.validate_dims("data initialization", "out_pred_which", "int",
        std::vector<size_t>{static_cast<size_t>(1),
          static_cast<size_t>((n_out_pred - n_out_pred_b))});
      out_pred_which = std::vector<std::vector<int>>(1,
                         std::vector<int>((n_out_pred - n_out_pred_b),
                           std::numeric_limits<int>::min()));
      {
        std::vector<int> out_pred_which_flat__;
        current_statement__ = 118;
        out_pred_which_flat__ = context__.vals_i("out_pred_which");
        current_statement__ = 118;
        pos__ = 1;
        current_statement__ = 118;
        for (int sym1__ = 1; sym1__ <= (n_out_pred - n_out_pred_b); ++sym1__) {
          current_statement__ = 118;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 118;
            stan::model::assign(out_pred_which, out_pred_which_flat__[(pos__
              - 1)], "assigning variable out_pred_which",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 118;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 119;
      stan::math::validate_non_negative_index("out", "n_out", n_out);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("out", "N", N);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "out", "double",
        std::vector<size_t>{static_cast<size_t>(n_out),
          static_cast<size_t>(N)});
      out = std::vector<Eigen::Matrix<double,-1,1>>(n_out,
              Eigen::Matrix<double,-1,1>::Constant(N,
                std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> out_flat__;
        current_statement__ = 121;
        out_flat__ = context__.vals_r("out");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 121;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 121;
            stan::model::assign(out, out_flat__[(pos__ - 1)],
              "assigning variable out", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 121;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 122;
      stan::math::validate_non_negative_index("out_pred_b", "N", N);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("out_pred_b", "n_out_pred_b",
        n_out_pred_b);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "out_pred_b", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(n_out_pred_b)});
      out_pred_b_data__ = Eigen::Matrix<double,-1,-1>::Constant(N,
                            n_out_pred_b,
                            std::numeric_limits<double>::quiet_NaN());
      new (&out_pred_b)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(out_pred_b_data__.data(), N,
        n_out_pred_b);
      {
        std::vector<local_scalar_t__> out_pred_b_flat__;
        current_statement__ = 124;
        out_pred_b_flat__ = context__.vals_r("out_pred_b");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= n_out_pred_b; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(out_pred_b, out_pred_b_flat__[(pos__ - 1)],
              "assigning variable out_pred_b",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      context__.validate_dims("data initialization", "out_is_std", "int",
        std::vector<size_t>{});
      out_is_std = std::numeric_limits<int>::min();
      current_statement__ = 125;
      out_is_std = context__.vals_i("out_is_std")[(1 - 1)];
      current_statement__ = 125;
      stan::math::check_greater_or_equal(function__, "out_is_std",
        out_is_std, 0);
      current_statement__ = 125;
      stan::math::check_less_or_equal(function__, "out_is_std", out_is_std, 1);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "N_miss", "int",
        std::vector<size_t>{});
      N_miss = std::numeric_limits<int>::min();
      current_statement__ = 126;
      N_miss = context__.vals_i("N_miss")[(1 - 1)];
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "N_miss", N_miss, 0);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("pos_miss", "N_miss", N_miss);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "pos_miss", "int",
        std::vector<size_t>{static_cast<size_t>(1),
          static_cast<size_t>(N_miss)});
      pos_miss = std::vector<std::vector<int>>(1,
                   std::vector<int>(N_miss, std::numeric_limits<int>::min()));
      {
        std::vector<int> pos_miss_flat__;
        current_statement__ = 128;
        pos_miss_flat__ = context__.vals_i("pos_miss");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 128;
            stan::model::assign(pos_miss, pos_miss_flat__[(pos__ - 1)],
              "assigning variable pos_miss", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 128;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 129;
      n_random = std::numeric_limits<int>::min();
      current_statement__ = 130;
      n_inno = std::numeric_limits<int>::min();
      current_statement__ = 137;
      if (stan::math::logical_eq(logv_is_random, 0)) {
        current_statement__ = 134;
        n_random = 2;
        current_statement__ = 135;
        n_inno = 1;
      } else {
        current_statement__ = 131;
        n_random = 3;
        current_statement__ = 132;
        n_inno = N;
      }
      current_statement__ = 138;
      stan::math::validate_non_negative_index("b", "N", N);
      current_statement__ = 139;
      stan::math::validate_non_negative_index("b", "n_random", n_random);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("sigma", "n_random", n_random);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("y_impute", "N_miss", N_miss);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("btw_pred", "n_cov", n_cov);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("btw_pred", "n_random",
        n_random);
      current_statement__ = 145;
      stan::math::validate_non_negative_index("bs", "n_out", n_out);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("bs", "n_out_pred", n_out_pred);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("sigma_out", "n_out", n_out);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("alpha_out", "n_out", n_out);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("bmu", "N", N);
      current_statement__ = 150;
      stan::math::validate_non_negative_index("bmu", "n_random", n_random);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("sd_noise", "n_inno", n_inno);
      current_statement__ = 152;
      stan::math::validate_non_negative_index("y_merge", "N_obs", N_obs);
      current_statement__ = 153;
      stan::math::validate_non_negative_index("b_pred", "N", N);
      current_statement__ = 154;
      stan::math::validate_non_negative_index("b_pred", "n_out_pred",
        n_out_pred);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("bcorr", "n_random", n_random);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("bcorr", "n_random", n_random);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("bcov", "n_random", n_random);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("bcov", "n_random", n_random);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("y_hat", "n_out", n_out);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("y_hat", "N", N);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("R2_out", "n_out", n_out);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("y_rep", "N_obs", N_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = (N * n_random) + n_random + ((n_random * (n_random - 1))
      / 2) + N_miss + (n_cov * n_random) + (n_out * n_out_pred) + n_out +
      n_out;
  }
  inline std::string model_name() const final {
    return "model_manifest_AR";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_manifest_AR_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random,
            DUMMY_VAR__));
      current_statement__ = 1;
      b = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N, n_random);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_random);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_random, n_random,
          DUMMY_VAR__);
      current_statement__ = 3;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
            n_random);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      current_statement__ = 4;
      y_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_miss);
      Eigen::Matrix<local_scalar_t__,-1,-1> btw_pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_cov, n_random,
          DUMMY_VAR__);
      current_statement__ = 5;
      btw_pred = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(n_cov, n_random);
      Eigen::Matrix<local_scalar_t__,-1,-1> bs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_out, n_out_pred,
          DUMMY_VAR__);
      current_statement__ = 6;
      bs = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_out,
             n_out_pred);
      std::vector<local_scalar_t__> sigma_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_out = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    n_out);
      std::vector<local_scalar_t__> alpha_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 8;
      alpha_out = in__.template read<std::vector<local_scalar_t__>>(n_out);
      Eigen::Matrix<local_scalar_t__,-1,-1> bmu =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_random,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> sd_noise =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_inno, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> y_merge =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_obs, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,-1> b_pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(N, n_out_pred,
          DUMMY_VAR__);
      current_statement__ = 19;
      stan::model::assign(bmu, stan::math::multiply(W, btw_pred),
        "assigning variable bmu");
      current_statement__ = 24;
      if (stan::math::logical_eq(logv_is_random, 1)) {
        current_statement__ = 22;
        stan::model::assign(sd_noise,
          stan::math::sqrt(
            stan::math::exp(
              stan::math::to_vector(
                stan::model::rvalue(b, "b", stan::model::index_omni(),
                  stan::model::index_uni(3))))),
          "assigning variable sd_noise");
      } else {
        current_statement__ = 20;
        stan::model::assign(sd_noise,
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(3)),
          "assigning variable sd_noise", stan::model::index_uni(1));
      }
      current_statement__ = 25;
      stan::model::assign(y_merge, y, "assigning variable y_merge");
      current_statement__ = 28;
      if (stan::math::logical_gt(N_miss, 0)) {
        current_statement__ = 26;
        stan::model::assign(y_merge, y_impute, "assigning variable y_merge",
          stan::model::index_multi(
            stan::model::rvalue(pos_miss, "pos_miss",
              stan::model::index_uni(1), stan::model::index_omni())));
      }
      current_statement__ = 40;
      if (stan::math::logical_gt(n_out, 0)) {
        current_statement__ = 35;
        for (int nn = 1; nn <= (n_out_pred - n_out_pred_b); ++nn) {
          current_statement__ = 33;
          if (stan::math::logical_eq(out_is_std, 1)) {
            current_statement__ = 31;
            stan::model::assign(b_pred,
              stan::math::divide(
                stan::math::subtract(
                  stan::math::to_vector(
                    stan::model::rvalue(b, "b", stan::model::index_omni(),
                      stan::model::index_uni(
                        stan::model::rvalue(out_pred_which, "out_pred_which",
                          stan::model::index_uni(1),
                          stan::model::index_uni(nn))))),
                  stan::math::mean(
                    stan::model::rvalue(b, "b", stan::model::index_omni(),
                      stan::model::index_uni(
                        stan::model::rvalue(out_pred_which, "out_pred_which",
                          stan::model::index_uni(1),
                          stan::model::index_uni(nn)))))),
                stan::math::sd(
                  stan::model::rvalue(b, "b", stan::model::index_omni(),
                    stan::model::index_uni(
                      stan::model::rvalue(out_pred_which, "out_pred_which",
                        stan::model::index_uni(1), stan::model::index_uni(nn)))))),
              "assigning variable b_pred", stan::model::index_omni(),
              stan::model::index_uni(nn));
          } else {
            current_statement__ = 29;
            stan::model::assign(b_pred,
              stan::math::to_vector(
                stan::model::rvalue(b, "b", stan::model::index_omni(),
                  stan::model::index_uni(
                    stan::model::rvalue(out_pred_which, "out_pred_which",
                      stan::model::index_uni(1), stan::model::index_uni(nn))))),
              "assigning variable b_pred", stan::model::index_omni(),
              stan::model::index_uni(nn));
          }
        }
        current_statement__ = 38;
        for (int nn = 1; nn <= n_out_pred_b; ++nn) {
          current_statement__ = 36;
          stan::model::assign(b_pred,
            stan::model::rvalue(out_pred_b, "out_pred_b",
              stan::model::index_omni(), stan::model::index_uni(nn)),
            "assigning variable b_pred", stan::model::index_omni(),
            stan::model::index_uni(((nn + n_out_pred) - n_out_pred_b)));
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "sd_noise", sd_noise, 0);
      {
        int pos = std::numeric_limits<int>::min();
        current_statement__ = 59;
        pos = 1;
        current_statement__ = 60;
        stan::math::validate_non_negative_index("SIGMA", "n_random", n_random);
        current_statement__ = 61;
        stan::math::validate_non_negative_index("SIGMA", "n_random", n_random);
        Eigen::Matrix<local_scalar_t__,-1,-1> SIGMA =
          Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_random, n_random,
            DUMMY_VAR__);
        current_statement__ = 62;
        stan::model::assign(SIGMA,
          stan::math::diag_pre_multiply(
            stan::model::rvalue(sigma, "sigma",
              stan::model::index_min_max(1, n_random)), L),
          "assigning variable SIGMA");
        current_statement__ = 63;
        lp_accum__.add(stan::math::lkj_corr_cholesky_lpdf<propto__>(L, 1));
        current_statement__ = 64;
        lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma, 0, 10));
        current_statement__ = 73;
        for (int kk = 1; kk <= n_cov; ++kk) {
          current_statement__ = 71;
          for (int nn = 1; nn <= n_random; ++nn) {
            current_statement__ = 69;
            if (stan::math::logical_eq(nn, 1)) {
              current_statement__ = 67;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(btw_pred, "btw_pred",
                                 stan::model::index_uni(kk),
                                 stan::model::index_uni(nn)), 0, 10));
            } else {
              current_statement__ = 65;
              lp_accum__.add(stan::math::normal_lpdf<propto__>(
                               stan::model::rvalue(btw_pred, "btw_pred",
                                 stan::model::index_uni(kk),
                                 stan::model::index_uni(nn)), 0, 1));
            }
          }
        }
        current_statement__ = 84;
        if (stan::math::logical_gt(n_out, 0)) {
          current_statement__ = 82;
          if (out_is_std) {
            current_statement__ = 78;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::math::to_vector(bs), 0, 5));
            current_statement__ = 79;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_out, 0, 1));
            current_statement__ = 80;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_out, 0, 1));
          } else {
            current_statement__ = 74;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::math::to_vector(bs), 0, 10));
            current_statement__ = 75;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(sigma_out, 0, 10));
            current_statement__ = 76;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_out, 0,
                             100));
          }
        }
        current_statement__ = 96;
        for (int pp = 1; pp <= N; ++pp) {
          current_statement__ = 85;
          lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(
                           stan::model::rvalue(b, "b",
                             stan::model::index_uni(pp)),
                           stan::model::rvalue(bmu, "bmu",
                             stan::model::index_uni(pp),
                             stan::model::index_min_max(1, n_random)), SIGMA));
          current_statement__ = 86;
          stan::math::validate_non_negative_index("mus", "(N_obs_id[pp])",
            stan::model::rvalue(N_obs_id, "N_obs_id",
              stan::model::index_uni(pp)));
          Eigen::Matrix<local_scalar_t__,-1,1> mus =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::model::rvalue(
                                                             N_obs_id,
                                                             "N_obs_id",
                                                             stan::model::index_uni(
                                                               pp)),
              DUMMY_VAR__);
          current_statement__ = 88;
          stan::model::assign(mus,
            stan::math::add(
              stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                stan::model::index_uni(1)),
              stan::math::multiply(
                stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                  stan::model::index_uni(2)),
                stan::math::subtract(
                  stan::model::rvalue(y_merge, "y_merge",
                    stan::model::index_min_max(pos, (pos +
                      (stan::model::rvalue(N_obs_id, "N_obs_id",
                         stan::model::index_uni(pp)) - 1)))),
                  stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                    stan::model::index_uni(1))))), "assigning variable mus");
          current_statement__ = 93;
          if (stan::math::logical_eq(logv_is_random, 1)) {
            current_statement__ = 91;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y_merge, "y_merge",
                               stan::model::index_min_max((pos + 1), (pos +
                                 stan::model::rvalue(N_obs_id, "N_obs_id",
                                   stan::model::index_uni(pp))))), mus,
                             stan::model::rvalue(sd_noise, "sd_noise",
                               stan::model::index_uni(pp))));
          } else {
            current_statement__ = 89;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(y_merge, "y_merge",
                               stan::model::index_min_max((pos + 1), (pos +
                                 stan::model::rvalue(N_obs_id, "N_obs_id",
                                   stan::model::index_uni(pp))))), mus,
                             stan::model::rvalue(sd_noise, "sd_noise",
                               stan::model::index_uni(1))));
          }
          current_statement__ = 94;
          pos = ((pos +
            stan::model::rvalue(N_obs_id, "N_obs_id",
              stan::model::index_uni(pp)))
            + 1);
        }
        current_statement__ = 101;
        if (stan::math::logical_gt(n_out, 0)) {
          current_statement__ = 99;
          for (int oo = 1; oo <= n_out; ++oo) {
            current_statement__ = 97;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(out, "out",
                               stan::model::index_uni(oo),
                               stan::model::index_omni()),
                             stan::math::add(
                               stan::math::multiply(b_pred,
                                 stan::math::transpose(
                                   stan::model::rvalue(bs, "bs",
                                     stan::model::index_uni(oo),
                                     stan::model::index_omni()))),
                               stan::model::rvalue(alpha_out, "alpha_out",
                                 stan::model::index_uni(oo))),
                             stan::model::rvalue(sigma_out, "sigma_out",
                               stan::model::index_uni(oo))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_manifest_AR_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<Eigen::Matrix<double,-1,1>> b =
        std::vector<Eigen::Matrix<double,-1,1>>(N,
          Eigen::Matrix<double,-1,1>::Constant(n_random,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 1;
      b = in__.template read<
            std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N, n_random);
      Eigen::Matrix<double,-1,1> sigma =
        Eigen::Matrix<double,-1,1>::Constant(n_random,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0, lp__,
                n_random);
      Eigen::Matrix<double,-1,-1> L =
        Eigen::Matrix<double,-1,-1>::Constant(n_random, n_random,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      L = in__.template read_constrain_cholesky_factor_corr<
            Eigen::Matrix<local_scalar_t__,-1,-1>, jacobian__>(lp__,
            n_random);
      Eigen::Matrix<double,-1,1> y_impute =
        Eigen::Matrix<double,-1,1>::Constant(N_miss,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      y_impute = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_miss);
      Eigen::Matrix<double,-1,-1> btw_pred =
        Eigen::Matrix<double,-1,-1>::Constant(n_cov, n_random,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      btw_pred = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,-1>>(n_cov, n_random);
      Eigen::Matrix<double,-1,-1> bs =
        Eigen::Matrix<double,-1,-1>::Constant(n_out, n_out_pred,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      bs = in__.template read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_out,
             n_out_pred);
      std::vector<double> sigma_out =
        std::vector<double>(n_out, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      sigma_out = in__.template read_constrain_lb<
                    std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                    n_out);
      std::vector<double> alpha_out =
        std::vector<double>(n_out, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      alpha_out = in__.template read<std::vector<local_scalar_t__>>(n_out);
      Eigen::Matrix<double,-1,-1> bmu =
        Eigen::Matrix<double,-1,-1>::Constant(N, n_random,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> sd_noise =
        Eigen::Matrix<double,-1,1>::Constant(n_inno,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> y_merge =
        Eigen::Matrix<double,-1,1>::Constant(N_obs,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> b_pred =
        Eigen::Matrix<double,-1,-1>::Constant(N, n_out_pred,
          std::numeric_limits<double>::quiet_NaN());
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          out__.write(b[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(sigma);
      out__.write(L);
      out__.write(y_impute);
      out__.write(btw_pred);
      out__.write(bs);
      out__.write(sigma_out);
      out__.write(alpha_out);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 19;
      stan::model::assign(bmu, stan::math::multiply(W, btw_pred),
        "assigning variable bmu");
      current_statement__ = 24;
      if (stan::math::logical_eq(logv_is_random, 1)) {
        current_statement__ = 22;
        stan::model::assign(sd_noise,
          stan::math::sqrt(
            stan::math::exp(
              stan::math::to_vector(
                stan::model::rvalue(b, "b", stan::model::index_omni(),
                  stan::model::index_uni(3))))),
          "assigning variable sd_noise");
      } else {
        current_statement__ = 20;
        stan::model::assign(sd_noise,
          stan::model::rvalue(sigma, "sigma", stan::model::index_uni(3)),
          "assigning variable sd_noise", stan::model::index_uni(1));
      }
      current_statement__ = 25;
      stan::model::assign(y_merge, y, "assigning variable y_merge");
      current_statement__ = 28;
      if (stan::math::logical_gt(N_miss, 0)) {
        current_statement__ = 26;
        stan::model::assign(y_merge, y_impute, "assigning variable y_merge",
          stan::model::index_multi(
            stan::model::rvalue(pos_miss, "pos_miss",
              stan::model::index_uni(1), stan::model::index_omni())));
      }
      current_statement__ = 40;
      if (stan::math::logical_gt(n_out, 0)) {
        current_statement__ = 35;
        for (int nn = 1; nn <= (n_out_pred - n_out_pred_b); ++nn) {
          current_statement__ = 33;
          if (stan::math::logical_eq(out_is_std, 1)) {
            current_statement__ = 31;
            stan::model::assign(b_pred,
              stan::math::divide(
                stan::math::subtract(
                  stan::math::to_vector(
                    stan::model::rvalue(b, "b", stan::model::index_omni(),
                      stan::model::index_uni(
                        stan::model::rvalue(out_pred_which, "out_pred_which",
                          stan::model::index_uni(1),
                          stan::model::index_uni(nn))))),
                  stan::math::mean(
                    stan::model::rvalue(b, "b", stan::model::index_omni(),
                      stan::model::index_uni(
                        stan::model::rvalue(out_pred_which, "out_pred_which",
                          stan::model::index_uni(1),
                          stan::model::index_uni(nn)))))),
                stan::math::sd(
                  stan::model::rvalue(b, "b", stan::model::index_omni(),
                    stan::model::index_uni(
                      stan::model::rvalue(out_pred_which, "out_pred_which",
                        stan::model::index_uni(1), stan::model::index_uni(nn)))))),
              "assigning variable b_pred", stan::model::index_omni(),
              stan::model::index_uni(nn));
          } else {
            current_statement__ = 29;
            stan::model::assign(b_pred,
              stan::math::to_vector(
                stan::model::rvalue(b, "b", stan::model::index_omni(),
                  stan::model::index_uni(
                    stan::model::rvalue(out_pred_which, "out_pred_which",
                      stan::model::index_uni(1), stan::model::index_uni(nn))))),
              "assigning variable b_pred", stan::model::index_omni(),
              stan::model::index_uni(nn));
          }
        }
        current_statement__ = 38;
        for (int nn = 1; nn <= n_out_pred_b; ++nn) {
          current_statement__ = 36;
          stan::model::assign(b_pred,
            stan::model::rvalue(out_pred_b, "out_pred_b",
              stan::model::index_omni(), stan::model::index_uni(nn)),
            "assigning variable b_pred", stan::model::index_omni(),
            stan::model::index_uni(((nn + n_out_pred) - n_out_pred_b)));
        }
      }
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "sd_noise", sd_noise, 0);
      if (emit_transformed_parameters__) {
        out__.write(bmu);
        out__.write(sd_noise);
        out__.write(y_merge);
        out__.write(b_pred);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,-1> bcorr =
        Eigen::Matrix<double,-1,-1>::Constant(n_random, n_random,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,-1> bcov =
        Eigen::Matrix<double,-1,-1>::Constant(n_random, n_random,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> y_hat =
        std::vector<Eigen::Matrix<double,-1,1>>(n_out,
          Eigen::Matrix<double,-1,1>::Constant(N,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> R2_out =
        std::vector<double>(n_out, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 41;
      stan::model::assign(bcorr,
        stan::math::multiply_lower_tri_self_transpose(L),
        "assigning variable bcorr");
      current_statement__ = 42;
      stan::model::assign(bcov,
        stan::math::quad_form_diag(bcorr,
          stan::model::rvalue(sigma, "sigma",
            stan::model::index_min_max(1, n_random))),
        "assigning variable bcov");
      current_statement__ = 48;
      if (stan::math::logical_gt(n_out, 0)) {
        current_statement__ = 46;
        for (int oo = 1; oo <= n_out; ++oo) {
          current_statement__ = 43;
          stan::model::assign(y_hat,
            stan::math::add(
              stan::model::rvalue(alpha_out, "alpha_out",
                stan::model::index_uni(oo)),
              stan::math::multiply(b_pred,
                stan::math::transpose(
                  stan::model::rvalue(bs, "bs", stan::model::index_uni(oo),
                    stan::model::index_omni())))),
            "assigning variable y_hat", stan::model::index_uni(oo),
            stan::model::index_min_max(1, N));
          current_statement__ = 44;
          stan::model::assign(R2_out,
            ((stan::math::pow(
                stan::math::sd(
                  stan::model::rvalue(out, "out", stan::model::index_uni(oo),
                    stan::model::index_omni())), 2) -
            stan::math::pow(
              stan::model::rvalue(sigma_out, "sigma_out",
                stan::model::index_uni(oo)), 2)) /
            stan::math::pow(
              stan::math::sd(
                stan::model::rvalue(out, "out", stan::model::index_uni(oo),
                  stan::model::index_omni())), 2)),
            "assigning variable R2_out", stan::model::index_uni(oo));
        }
      }
      int pos = std::numeric_limits<int>::min();
      current_statement__ = 17;
      pos = 1;
      std::vector<double> y_rep =
        std::vector<double>(N_obs, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 58;
      for (int pp = 1; pp <= N; ++pp) {
        current_statement__ = 55;
        if (stan::math::logical_eq(logv_is_random, 1)) {
          current_statement__ = 52;
          stan::model::assign(y_rep,
            stan::model::rvalue(b, "b", stan::model::index_uni(pp),
              stan::model::index_uni(1)), "assigning variable y_rep",
            stan::model::index_uni(pos));
          current_statement__ = 53;
          stan::model::assign(y_rep,
            stan::math::normal_rng(
              stan::math::add(
                stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                  stan::model::index_uni(1)),
                stan::math::multiply(
                  stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                    stan::model::index_uni(2)),
                  stan::math::subtract(
                    stan::model::rvalue(y_merge, "y_merge",
                      stan::model::index_min_max(pos, (pos +
                        (stan::model::rvalue(N_obs_id, "N_obs_id",
                           stan::model::index_uni(pp)) - 1)))),
                    stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                      stan::model::index_uni(1))))),
              stan::model::rvalue(sd_noise, "sd_noise",
                stan::model::index_uni(pp)), base_rng__),
            "assigning variable y_rep",
            stan::model::index_min_max((pos + 1), (pos +
              stan::model::rvalue(N_obs_id, "N_obs_id",
                stan::model::index_uni(pp)))));
        } else {
          current_statement__ = 49;
          stan::model::assign(y_rep,
            stan::model::rvalue(b, "b", stan::model::index_uni(pp),
              stan::model::index_uni(1)), "assigning variable y_rep",
            stan::model::index_uni(pos));
          current_statement__ = 50;
          stan::model::assign(y_rep,
            stan::math::normal_rng(
              stan::math::add(
                stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                  stan::model::index_uni(1)),
                stan::math::multiply(
                  stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                    stan::model::index_uni(2)),
                  stan::math::subtract(
                    stan::model::rvalue(y_merge, "y_merge",
                      stan::model::index_min_max(pos, (pos +
                        (stan::model::rvalue(N_obs_id, "N_obs_id",
                           stan::model::index_uni(pp)) - 1)))),
                    stan::model::rvalue(b, "b", stan::model::index_uni(pp),
                      stan::model::index_uni(1))))),
              stan::model::rvalue(sd_noise, "sd_noise",
                stan::model::index_uni(1)), base_rng__),
            "assigning variable y_rep",
            stan::model::index_min_max((pos + 1), (pos +
              stan::model::rvalue(N_obs_id, "N_obs_id",
                stan::model::index_uni(pp)))));
        }
        current_statement__ = 56;
        pos = ((pos +
          stan::model::rvalue(N_obs_id, "N_obs_id",
            stan::model::index_uni(pp)))
          + 1);
      }
      out__.write(bcorr);
      out__.write(bcov);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
          out__.write(y_hat[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(R2_out);
      out__.write(pos);
      out__.write(y_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random,
            DUMMY_VAR__));
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 1;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 1;
          stan::model::assign(b, in__.read<local_scalar_t__>(),
            "assigning variable b", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(b);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(sigma,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(n_random),
        "assigning variable sigma");
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_random, n_random,
          DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(L,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_random, n_random),
        "assigning variable L");
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(y_impute,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_miss),
        "assigning variable y_impute");
      out__.write(y_impute);
      Eigen::Matrix<local_scalar_t__,-1,-1> btw_pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_cov, n_random,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(btw_pred,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_cov, n_random),
        "assigning variable btw_pred");
      out__.write(btw_pred);
      Eigen::Matrix<local_scalar_t__,-1,-1> bs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_out, n_out_pred,
          DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(bs,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,-1>>(n_out, n_out_pred),
        "assigning variable bs");
      out__.write(bs);
      std::vector<local_scalar_t__> sigma_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(sigma_out,
        in__.read<std::vector<local_scalar_t__>>(n_out),
        "assigning variable sigma_out");
      out__.write_free_lb(0, sigma_out);
      std::vector<local_scalar_t__> alpha_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(alpha_out,
        in__.read<std::vector<local_scalar_t__>>(n_out),
        "assigning variable alpha_out");
      out__.write(alpha_out);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "b", "double",
        std::vector<size_t>{static_cast<size_t>(N),
          static_cast<size_t>(n_random)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "sigma", "double",
        std::vector<size_t>{static_cast<size_t>(n_random)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "L", "double",
        std::vector<size_t>{static_cast<size_t>(n_random),
          static_cast<size_t>(n_random)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "y_impute",
        "double", std::vector<size_t>{static_cast<size_t>(N_miss)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "btw_pred",
        "double",
        std::vector<size_t>{static_cast<size_t>(n_cov),
          static_cast<size_t>(n_random)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "bs", "double",
        std::vector<size_t>{static_cast<size_t>(n_out),
          static_cast<size_t>(n_out_pred)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sigma_out",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "alpha_out",
        "double", std::vector<size_t>{static_cast<size_t>(n_out)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> b =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 1;
        b_flat__ = context__.vals_r("b");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            stan::model::assign(b, b_flat__[(pos__ - 1)],
              "assigning variable b", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 1;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(b);
      Eigen::Matrix<local_scalar_t__,-1,1> sigma =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(n_random, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 2;
        sigma_flat__ = context__.vals_r("sigma");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(sigma, sigma_flat__[(pos__ - 1)],
            "assigning variable sigma", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__,-1,-1> L =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_random, n_random,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 3;
        L_flat__ = context__.vals_r("L");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 3;
            stan::model::assign(L, L_flat__[(pos__ - 1)],
              "assigning variable L", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 3;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_cholesky_factor_corr(L);
      Eigen::Matrix<local_scalar_t__,-1,1> y_impute =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_miss, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> y_impute_flat__;
        current_statement__ = 4;
        y_impute_flat__ = context__.vals_r("y_impute");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(y_impute, y_impute_flat__[(pos__ - 1)],
            "assigning variable y_impute", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(y_impute);
      Eigen::Matrix<local_scalar_t__,-1,-1> btw_pred =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_cov, n_random,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> btw_pred_flat__;
        current_statement__ = 5;
        btw_pred_flat__ = context__.vals_r("btw_pred");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 5;
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            current_statement__ = 5;
            stan::model::assign(btw_pred, btw_pred_flat__[(pos__ - 1)],
              "assigning variable btw_pred", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 5;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(btw_pred);
      Eigen::Matrix<local_scalar_t__,-1,-1> bs =
        Eigen::Matrix<local_scalar_t__,-1,-1>::Constant(n_out, n_out_pred,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> bs_flat__;
        current_statement__ = 6;
        bs_flat__ = context__.vals_r("bs");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_out_pred; ++sym1__) {
          current_statement__ = 6;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 6;
            stan::model::assign(bs, bs_flat__[(pos__ - 1)],
              "assigning variable bs", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 6;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(bs);
      std::vector<local_scalar_t__> sigma_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 7;
      sigma_out = context__.vals_r("sigma_out");
      out__.write_free_lb(0, sigma_out);
      std::vector<local_scalar_t__> alpha_out =
        std::vector<local_scalar_t__>(n_out, DUMMY_VAR__);
      current_statement__ = 8;
      alpha_out = context__.vals_r("alpha_out");
      out__.write(alpha_out);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"b", "sigma", "L", "y_impute",
                "btw_pred", "bs", "sigma_out", "alpha_out"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"bmu", "sd_noise", "y_merge", "b_pred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"bcorr", "bcov", "y_hat", "R2_out", "pos", "y_rep"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(N),
                                                 static_cast<size_t>(n_random)},
                std::vector<size_t>{static_cast<size_t>(n_random)},
                std::vector<size_t>{static_cast<size_t>(n_random),
                  static_cast<size_t>(n_random)},
                std::vector<size_t>{static_cast<size_t>(N_miss)},
                std::vector<size_t>{static_cast<size_t>(n_cov),
                  static_cast<size_t>(n_random)},
                std::vector<size_t>{static_cast<size_t>(n_out),
                  static_cast<size_t>(n_out_pred)},
                std::vector<size_t>{static_cast<size_t>(n_out)},
                std::vector<size_t>{static_cast<size_t>(n_out)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(n_random)},
             std::vector<size_t>{static_cast<size_t>(n_inno)},
             std::vector<size_t>{static_cast<size_t>(N_obs)},
             std::vector<size_t>{static_cast<size_t>(N),
               static_cast<size_t>(n_out_pred)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_random),
               static_cast<size_t>(n_random)},
             std::vector<size_t>{static_cast<size_t>(n_random),
               static_cast<size_t>(n_random)},
             std::vector<size_t>{static_cast<size_t>(n_out),
               static_cast<size_t>(N)},
             std::vector<size_t>{static_cast<size_t>(n_out)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_obs)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
        param_names__.emplace_back(std::string() + "L" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
        param_names__.emplace_back(std::string() + "btw_pred" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_out_pred; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
        param_names__.emplace_back(std::string() + "bs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_out" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_out" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "bmu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_inno; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_noise" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_merge" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out_pred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          param_names__.emplace_back(std::string() + "bcorr" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          param_names__.emplace_back(std::string() + "bcov" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "R2_out" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "pos");
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
        param_names__.emplace_back(std::string() + "b" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ((n_random * (n_random - 1)) /
         2); ++sym1__) {
      param_names__.emplace_back(std::string() + "L" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= N_miss; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_impute" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
        param_names__.emplace_back(std::string() + "btw_pred" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_out_pred; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
        param_names__.emplace_back(std::string() + "bs" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "sigma_out" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_out" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "bmu" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_inno; ++sym1__) {
        param_names__.emplace_back(std::string() + "sd_noise" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_merge" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= n_out_pred; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          param_names__.emplace_back(std::string() + "b_pred" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          param_names__.emplace_back(std::string() + "bcorr" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          param_names__.emplace_back(std::string() + "bcov" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
          param_names__.emplace_back(std::string() + "y_hat" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        param_names__.emplace_back(std::string() + "R2_out" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "pos");
      for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "y_rep" + '.' +
          std::to_string(sym1__));
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_random) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_random) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_random) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"parameters\"},{\"name\":\"btw_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_cov) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"parameters\"},{\"name\":\"bs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_out) + ",\"cols\":" + std::to_string(n_out_pred) + "},\"block\":\"parameters\"},{\"name\":\"sigma_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_inno) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_merge\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_obs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_out_pred) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_random) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"generated_quantities\"},{\"name\":\"bcov\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_random) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"R2_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"pos\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_random) + "}},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_random) + "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(((n_random * (n_random - 1)) /2)) + "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_miss) + "},\"block\":\"parameters\"},{\"name\":\"btw_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_cov) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"parameters\"},{\"name\":\"bs\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_out) + ",\"cols\":" + std::to_string(n_out_pred) + "},\"block\":\"parameters\"},{\"name\":\"sigma_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"alpha_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n_inno) + "},\"block\":\"transformed_parameters\"},{\"name\":\"y_merge\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_obs) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(N) + ",\"cols\":" + std::to_string(n_out_pred) + "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_random) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"generated_quantities\"},{\"name\":\"bcov\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n_random) + ",\"cols\":" + std::to_string(n_random) + "},\"block\":\"generated_quantities\"},{\"name\":\"y_hat\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "}},\"block\":\"generated_quantities\"},{\"name\":\"R2_out\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_out) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"pos\",\"type\":{\"name\":\"int\"},\"block\":\"generated_quantities\"},{\"name\":\"y_rep\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * n_random) + n_random) + (n_random
      * n_random)) + N_miss) + (n_cov * n_random)) + (n_out * n_out_pred)) +
      n_out) + n_out);
    const size_t num_transformed = emit_transformed_parameters * (((((N *
      n_random) + n_inno) + N_obs) + (N * n_out_pred)));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((n_random * n_random) + (n_random * n_random)) + (n_out * N)) +
      n_out) + 1) + N_obs));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((((N * n_random) + n_random) + (n_random
      * n_random)) + N_miss) + (n_cov * n_random)) + (n_out * n_out_pred)) +
      n_out) + n_out);
    const size_t num_transformed = emit_transformed_parameters * (((((N *
      n_random) + n_inno) + N_obs) + (N * n_out_pred)));
    const size_t num_gen_quantities = emit_generated_quantities *
      (((((((n_random * n_random) + (n_random * n_random)) + (n_out * N)) +
      n_out) + 1) + N_obs));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_manifest_AR_namespace::model_manifest_AR;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_manifest_AR_namespace::profiles__;
}
#endif
#endif
