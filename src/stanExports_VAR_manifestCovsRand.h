// Generated by rstantools.  Do not edit by hand.

/*
    dsemr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dsemr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dsemr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_VAR_manifestCovsRand_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 41, column 2 to column 29)",
                                                      " (in 'string', line 42, column 2 to column 33)",
                                                      " (in 'string', line 43, column 2 to column 43)",
                                                      " (in 'string', line 44, column 2 to column 35)",
                                                      " (in 'string', line 45, column 2 to column 26)",
                                                      " (in 'string', line 46, column 2 to column 30)",
                                                      " (in 'string', line 47, column 2 to column 38)",
                                                      " (in 'string', line 48, column 2 to column 24)",
                                                      " (in 'string', line 50, column 2 to column 41)",
                                                      " (in 'string', line 53, column 2 to column 26)",
                                                      " (in 'string', line 54, column 2 to column 22)",
                                                      " (in 'string', line 57, column 2 to column 35)",
                                                      " (in 'string', line 58, column 2 to column 46)",
                                                      " (in 'string', line 60, column 2 to column 35)",
                                                      " (in 'string', line 61, column 2 to column 24)",
                                                      " (in 'string', line 63, column 3 to column 46)",
                                                      " (in 'string', line 62, column 13 to line 64, column 2)",
                                                      " (in 'string', line 62, column 2 to line 64, column 2)",
                                                      " (in 'string', line 66, column 2 to column 21)",
                                                      " (in 'string', line 70, column 4 to column 34)",
                                                      " (in 'string', line 69, column 22 to line 71, column 3)",
                                                      " (in 'string', line 69, column 2 to line 71, column 3)",
                                                      " (in 'string', line 74, column 6 to column 62)",
                                                      " (in 'string', line 73, column 23 to line 75, column 5)",
                                                      " (in 'string', line 73, column 4 to line 75, column 5)",
                                                      " (in 'string', line 72, column 15 to line 76, column 3)",
                                                      " (in 'string', line 72, column 2 to line 76, column 3)",
                                                      " (in 'string', line 84, column 6 to column 60)",
                                                      " (in 'string', line 83, column 11 to line 85, column 5)",
                                                      " (in 'string', line 81, column 6 to column 59)",
                                                      " (in 'string', line 80, column 26 to line 83, column 5)",
                                                      " (in 'string', line 80, column 4 to line 85, column 5)",
                                                      " (in 'string', line 79, column 15 to line 86, column 3)",
                                                      " (in 'string', line 79, column 2 to line 86, column 3)",
                                                      " (in 'string', line 90, column 4 to column 67)",
                                                      " (in 'string', line 89, column 25 to line 91, column 5)",
                                                      " (in 'string', line 89, column 2 to line 91, column 5)",
                                                      " (in 'string', line 164, column 2 to column 34)",
                                                      " (in 'string', line 167, column 2 to column 47)",
                                                      " (in 'string', line 94, column 2 to column 14)",
                                                      " (in 'string', line 95, column 2 to column 18)",
                                                      " (in 'string', line 96, column 2 to column 17)",
                                                      " (in 'string', line 97, column 2 to column 17)",
                                                      " (in 'string', line 98, column 9 to column 17)",
                                                      " (in 'string', line 98, column 19 to column 27)",
                                                      " (in 'string', line 98, column 2 to column 64)",
                                                      " (in 'string', line 99, column 24 to column 25)",
                                                      " (in 'string', line 99, column 9 to column 14)",
                                                      " (in 'string', line 99, column 2 to column 27)",
                                                      " (in 'string', line 100, column 2 to column 14)",
                                                      " (in 'string', line 104, column 4 to column 84)",
                                                      " (in 'string', line 105, column 4 to column 34)",
                                                      " (in 'string', line 102, column 17 to line 106, column 3)",
                                                      " (in 'string', line 102, column 4 to line 106, column 3)",
                                                      " (in 'string', line 101, column 14 to line 107, column 3)",
                                                      " (in 'string', line 101, column 2 to line 107, column 3)",
                                                      " (in 'string', line 109, column 2 to column 27)",
                                                      " (in 'string', line 111, column 2 to column 25)",
                                                      " (in 'string', line 114, column 4 to column 29)",
                                                      " (in 'string', line 116, column 4 to column 31)",
                                                      " (in 'string', line 115, column 17 to line 117, column 5)",
                                                      " (in 'string', line 115, column 4 to line 117, column 5)",
                                                      " (in 'string', line 113, column 22 to line 118, column 3)",
                                                      " (in 'string', line 113, column 2 to line 118, column 3)",
                                                      " (in 'string', line 120, column 4 to column 24)",
                                                      " (in 'string', line 119, column 17 to line 121, column 3)",
                                                      " (in 'string', line 119, column 2 to line 121, column 3)",
                                                      " (in 'string', line 124, column 4 to column 28)",
                                                      " (in 'string', line 126, column 4 to column 81)",
                                                      " (in 'string', line 128, column 25 to column 26)",
                                                      " (in 'string', line 128, column 11 to column 19)",
                                                      " (in 'string', line 128, column 4 to column 28)",
                                                      " (in 'string', line 132, column 25 to column 26)",
                                                      " (in 'string', line 132, column 11 to column 17)",
                                                      " (in 'string', line 132, column 4 to column 28)",
                                                      " (in 'string', line 134, column 4 to column 56)",
                                                      " (in 'string', line 133, column 17 to line 135, column 5)",
                                                      " (in 'string', line 133, column 4 to line 135, column 5)",
                                                      " (in 'string', line 138, column 32 to column 43)",
                                                      " (in 'string', line 138, column 11 to column 19)",
                                                      " (in 'string', line 138, column 4 to column 45)",
                                                      " (in 'string', line 140, column 6 to column 65)",
                                                      " (in 'string', line 141, column 6 to column 50)",
                                                      " (in 'string', line 139, column 27 to line 142, column 5)",
                                                      " (in 'string', line 139, column 4 to line 142, column 5)",
                                                      " (in 'string', line 148, column 14 to column 22)",
                                                      " (in 'string', line 148, column 24 to column 33)",
                                                      " (in 'string', line 148, column 6 to column 41)",
                                                      " (in 'string', line 150, column 8 to column 55)",
                                                      " (in 'string', line 149, column 28 to line 151, column 7)",
                                                      " (in 'string', line 149, column 6 to line 151, column 7)",
                                                      " (in 'string', line 153, column 6 to column 77)",
                                                      " (in 'string', line 147, column 6 to line 154, column 7)",
                                                      " (in 'string', line 156, column 6 to column 76)",
                                                      " (in 'string', line 145, column 17 to line 157, column 5)",
                                                      " (in 'string', line 145, column 4 to line 157, column 5)",
                                                      " (in 'string', line 159, column 4 to column 23)",
                                                      " (in 'string', line 160, column 4 to column 35)",
                                                      " (in 'string', line 122, column 18 to line 161, column 3)",
                                                      " (in 'string', line 122, column 2 to line 161, column 3)",
                                                      " (in 'string', line 3, column 2 to column 17)",
                                                      " (in 'string', line 4, column 2 to column 17)",
                                                      " (in 'string', line 5, column 2 to column 21)",
                                                      " (in 'string', line 6, column 2 to column 22)",
                                                      " (in 'string', line 7, column 2 to column 24)",
                                                      " (in 'string', line 8, column 2 to column 14)",
                                                      " (in 'string', line 9, column 17 to column 24)",
                                                      " (in 'string', line 9, column 2 to column 26)",
                                                      " (in 'string', line 10, column 16 to column 24)",
                                                      " (in 'string', line 10, column 2 to column 26)",
                                                      " (in 'string', line 11, column 24 to column 25)",
                                                      " (in 'string', line 11, column 2 to column 27)",
                                                      " (in 'string', line 12, column 18 to column 19)",
                                                      " (in 'string', line 12, column 9 to column 14)",
                                                      " (in 'string', line 12, column 2 to column 21)",
                                                      " (in 'string', line 14, column 2 to column 13)",
                                                      " (in 'string', line 15, column 15 to column 16)",
                                                      " (in 'string', line 15, column 2 to column 18)",
                                                      " (in 'string', line 16, column 17 to column 18)",
                                                      " (in 'string', line 16, column 19 to column 32)",
                                                      " (in 'string', line 16, column 2 to column 34)",
                                                      " (in 'string', line 20, column 34 to column 35)",
                                                      " (in 'string', line 20, column 2 to column 37)",
                                                      " (in 'string', line 21, column 2 to column 18)",
                                                      " (in 'string', line 22, column 20 to column 21)",
                                                      " (in 'string', line 22, column 2 to column 23)",
                                                      " (in 'string', line 23, column 16 to column 17)",
                                                      " (in 'string', line 23, column 2 to column 19)",
                                                      " (in 'string', line 26, column 2 to column 12)",
                                                      " (in 'string', line 27, column 9 to column 10)",
                                                      " (in 'string', line 27, column 12 to column 17)",
                                                      " (in 'string', line 27, column 2 to column 21)",
                                                      " (in 'string', line 29, column 22 to column 23)",
                                                      " (in 'string', line 29, column 2 to column 25)",
                                                      " (in 'string', line 30, column 22 to column 23)",
                                                      " (in 'string', line 30, column 24 to column 25)",
                                                      " (in 'string', line 30, column 2 to column 27)",
                                                      " (in 'string', line 31, column 12 to column 13)",
                                                      " (in 'string', line 31, column 2 to column 15)",
                                                      " (in 'string', line 32, column 12 to column 13)",
                                                      " (in 'string', line 32, column 2 to column 15)",
                                                      " (in 'string', line 34, column 2 to column 18)",
                                                      " (in 'string', line 37, column 2 to column 16)",
                                                      " (in 'string', line 38, column 21 to column 32)",
                                                      " (in 'string', line 38, column 2 to column 34)",
                                                      " (in 'string', line 41, column 26 to column 27)",
                                                      " (in 'string', line 41, column 9 to column 17)",
                                                      " (in 'string', line 42, column 18 to column 26)",
                                                      " (in 'string', line 43, column 18 to column 35)",
                                                      " (in 'string', line 44, column 23 to column 31)",
                                                      " (in 'string', line 45, column 9 to column 15)",
                                                      " (in 'string', line 46, column 13 to column 21)",
                                                      " (in 'string', line 47, column 9 to column 17)",
                                                      " (in 'string', line 47, column 18 to column 27)",
                                                      " (in 'string', line 48, column 9 to column 16)",
                                                      " (in 'string', line 50, column 28 to column 39)",
                                                      " (in 'string', line 50, column 9 to column 18)",
                                                      " (in 'string', line 53, column 9 to column 10)",
                                                      " (in 'string', line 53, column 12 to column 20)",
                                                      " (in 'string', line 54, column 19 to column 20)",
                                                      " (in 'string', line 54, column 9 to column 15)",
                                                      " (in 'string', line 57, column 32 to column 33)",
                                                      " (in 'string', line 57, column 20 to column 21)",
                                                      " (in 'string', line 58, column 33 to column 44)",
                                                      " (in 'string', line 58, column 20 to column 21)",
                                                      " (in 'string', line 60, column 9 to column 14)",
                                                      " (in 'string', line 60, column 16 to column 24)",
                                                      " (in 'string', line 164, column 9 to column 17)",
                                                      " (in 'string', line 164, column 18 to column 26)"};
#include <stan_meta_header.hpp>
class model_VAR_manifestCovsRand final : public model_base_crtp<model_VAR_manifestCovsRand> {
private:
  int N;
  int D;
  int N_obs;
  int n_pars;
  int n_random;
  int n_fixed;
  std::vector<std::vector<int>> is_fixed;
  std::vector<int> is_random;
  std::vector<int> N_obs_id;
  std::vector<Eigen::Matrix<double, -1, 1>> y;
  int n_miss;
  std::vector<int> n_miss_D;
  std::vector<std::vector<int>> pos_miss_D;
  std::vector<int> innos_rand;
  int n_innos_fix;
  std::vector<int> innos_fix_pos;
  std::vector<int> innos_pos;
  int n_cov;
  Eigen::Matrix<double, -1, -1> W;
  std::vector<int> N_pred;
  std::vector<std::vector<int>> D_pred;
  std::vector<int> Dpos1;
  std::vector<int> Dpos2;
  int n_inno_covs;
  int n_obs_cov;
  std::vector<std::vector<int>> inno_cov_pos;
  int sigma_1dim__;
  int btw_free_2dim__;
 
public:
  ~model_VAR_manifestCovsRand() { }
  
  inline std::string model_name() const final { return "model_VAR_manifestCovsRand"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_VAR_manifestCovsRand(stan::io::var_context& context__,
                             unsigned int random_seed__ = 0,
                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_VAR_manifestCovsRand_namespace::model_VAR_manifestCovsRand";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 101;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 101;
      current_statement__ = 101;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 102;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 102;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 102;
      current_statement__ = 102;
      check_greater_or_equal(function__, "D", D, 2);
      current_statement__ = 103;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 103;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 103;
      current_statement__ = 103;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 104;
      context__.validate_dims("data initialization","n_pars","int",
          context__.to_vec());
      n_pars = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      n_pars = context__.vals_i("n_pars")[(1 - 1)];
      current_statement__ = 104;
      current_statement__ = 104;
      check_greater_or_equal(function__, "n_pars", n_pars, 1);
      current_statement__ = 105;
      context__.validate_dims("data initialization","n_random","int",
          context__.to_vec());
      n_random = std::numeric_limits<int>::min();
      
      current_statement__ = 105;
      n_random = context__.vals_i("n_random")[(1 - 1)];
      current_statement__ = 105;
      current_statement__ = 105;
      check_greater_or_equal(function__, "n_random", n_random, D);
      current_statement__ = 106;
      context__.validate_dims("data initialization","n_fixed","int",
          context__.to_vec());
      n_fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 106;
      n_fixed = context__.vals_i("n_fixed")[(1 - 1)];
      current_statement__ = 107;
      validate_non_negative_index("is_fixed", "n_fixed", n_fixed);
      current_statement__ = 108;
      context__.validate_dims("data initialization","is_fixed","int",
          context__.to_vec(1, n_fixed));
      is_fixed = std::vector<std::vector<int>>(1, std::vector<int>(n_fixed, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> is_fixed_flat__;
        current_statement__ = 108;
        assign(is_fixed_flat__, nil_index_list(),
          context__.vals_i("is_fixed"), "assigning variable is_fixed_flat__");
        current_statement__ = 108;
        pos__ = 1;
        current_statement__ = 108;
        for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
          current_statement__ = 108;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 108;
            assign(is_fixed,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              is_fixed_flat__[(pos__ - 1)], "assigning variable is_fixed");
            current_statement__ = 108;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 109;
      validate_non_negative_index("is_random", "n_random", n_random);
      current_statement__ = 110;
      context__.validate_dims("data initialization","is_random","int",
          context__.to_vec(n_random));
      is_random = std::vector<int>(n_random, std::numeric_limits<int>::min());
      
      current_statement__ = 110;
      assign(is_random, nil_index_list(), context__.vals_i("is_random"),
        "assigning variable is_random");
      current_statement__ = 111;
      validate_non_negative_index("N_obs_id", "N", N);
      current_statement__ = 112;
      context__.validate_dims("data initialization","N_obs_id","int",
          context__.to_vec(N));
      N_obs_id = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 112;
      assign(N_obs_id, nil_index_list(), context__.vals_i("N_obs_id"),
        "assigning variable N_obs_id");
      current_statement__ = 112;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 112;
        current_statement__ = 112;
        check_greater_or_equal(function__, "N_obs_id[sym1__]",
                               N_obs_id[(sym1__ - 1)], 1);}
      current_statement__ = 113;
      validate_non_negative_index("y", "D", D);
      current_statement__ = 114;
      validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 115;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(D, N_obs));
      y = std::vector<Eigen::Matrix<double, -1, 1>>(D, Eigen::Matrix<double, -1, 1>(N_obs));
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 115;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 115;
        pos__ = 1;
        current_statement__ = 115;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 115;
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            current_statement__ = 115;
            assign(y,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              y_flat__[(pos__ - 1)], "assigning variable y");
            current_statement__ = 115;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 116;
      context__.validate_dims("data initialization","n_miss","int",
          context__.to_vec());
      n_miss = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      n_miss = context__.vals_i("n_miss")[(1 - 1)];
      current_statement__ = 117;
      validate_non_negative_index("n_miss_D", "D", D);
      current_statement__ = 118;
      context__.validate_dims("data initialization","n_miss_D","int",
          context__.to_vec(D));
      n_miss_D = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 118;
      assign(n_miss_D, nil_index_list(), context__.vals_i("n_miss_D"),
        "assigning variable n_miss_D");
      current_statement__ = 119;
      validate_non_negative_index("pos_miss_D", "D", D);
      current_statement__ = 120;
      validate_non_negative_index("pos_miss_D", "max(n_miss_D)",
                                  max(n_miss_D));
      current_statement__ = 121;
      context__.validate_dims("data initialization","pos_miss_D","int",
          context__.to_vec(D, max(n_miss_D)));
      pos_miss_D = std::vector<std::vector<int>>(D, std::vector<int>(
        max(n_miss_D), std::numeric_limits<int>::min()));
      
      {
        std::vector<int> pos_miss_D_flat__;
        current_statement__ = 121;
        assign(pos_miss_D_flat__, nil_index_list(),
          context__.vals_i("pos_miss_D"),
          "assigning variable pos_miss_D_flat__");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= max(n_miss_D); ++sym1__) {
          current_statement__ = 121;
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            current_statement__ = 121;
            assign(pos_miss_D,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              pos_miss_D_flat__[(pos__ - 1)], "assigning variable pos_miss_D");
            current_statement__ = 121;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 122;
      validate_non_negative_index("innos_rand", "D", D);
      current_statement__ = 123;
      context__.validate_dims("data initialization","innos_rand","int",
          context__.to_vec(D));
      innos_rand = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 123;
      assign(innos_rand, nil_index_list(), context__.vals_i("innos_rand"),
        "assigning variable innos_rand");
      current_statement__ = 123;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 123;
        current_statement__ = 123;
        check_greater_or_equal(function__, "innos_rand[sym1__]",
                               innos_rand[(sym1__ - 1)], 0);}
      current_statement__ = 123;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 123;
        current_statement__ = 123;
        check_less_or_equal(function__, "innos_rand[sym1__]",
                            innos_rand[(sym1__ - 1)], 1);}
      current_statement__ = 124;
      context__.validate_dims("data initialization","n_innos_fix","int",
          context__.to_vec());
      n_innos_fix = std::numeric_limits<int>::min();
      
      current_statement__ = 124;
      n_innos_fix = context__.vals_i("n_innos_fix")[(1 - 1)];
      current_statement__ = 125;
      validate_non_negative_index("innos_fix_pos", "D", D);
      current_statement__ = 126;
      context__.validate_dims("data initialization","innos_fix_pos","int",
          context__.to_vec(D));
      innos_fix_pos = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 126;
      assign(innos_fix_pos, nil_index_list(),
        context__.vals_i("innos_fix_pos"), "assigning variable innos_fix_pos");
      current_statement__ = 127;
      validate_non_negative_index("innos_pos", "D", D);
      current_statement__ = 128;
      context__.validate_dims("data initialization","innos_pos","int",
          context__.to_vec(D));
      innos_pos = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 128;
      assign(innos_pos, nil_index_list(), context__.vals_i("innos_pos"),
        "assigning variable innos_pos");
      current_statement__ = 129;
      context__.validate_dims("data initialization","n_cov","int",
          context__.to_vec());
      n_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 129;
      n_cov = context__.vals_i("n_cov")[(1 - 1)];
      current_statement__ = 130;
      validate_non_negative_index("W", "N", N);
      current_statement__ = 131;
      validate_non_negative_index("W", "n_cov", n_cov);
      current_statement__ = 132;
      context__.validate_dims("data initialization","W","double",
          context__.to_vec(N, n_cov));
      W = Eigen::Matrix<double, -1, -1>(N, n_cov);
      stan::math::fill(W, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 132;
        assign(W_flat__, nil_index_list(), context__.vals_r("W"),
          "assigning variable W_flat__");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= n_cov; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 132;
            assign(W,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              W_flat__[(pos__ - 1)], "assigning variable W");
            current_statement__ = 132;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 133;
      validate_non_negative_index("N_pred", "D", D);
      current_statement__ = 134;
      context__.validate_dims("data initialization","N_pred","int",
          context__.to_vec(D));
      N_pred = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 134;
      assign(N_pred, nil_index_list(), context__.vals_i("N_pred"),
        "assigning variable N_pred");
      current_statement__ = 134;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 134;
        current_statement__ = 134;
        check_greater_or_equal(function__, "N_pred[sym1__]",
                               N_pred[(sym1__ - 1)], 1);}
      current_statement__ = 135;
      validate_non_negative_index("D_pred", "D", D);
      current_statement__ = 136;
      validate_non_negative_index("D_pred", "D", D);
      current_statement__ = 137;
      context__.validate_dims("data initialization","D_pred","int",
          context__.to_vec(D, D));
      D_pred = std::vector<std::vector<int>>(D, std::vector<int>(D, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> D_pred_flat__;
        current_statement__ = 137;
        assign(D_pred_flat__, nil_index_list(), context__.vals_i("D_pred"),
          "assigning variable D_pred_flat__");
        current_statement__ = 137;
        pos__ = 1;
        current_statement__ = 137;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 137;
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            current_statement__ = 137;
            assign(D_pred,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              D_pred_flat__[(pos__ - 1)], "assigning variable D_pred");
            current_statement__ = 137;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 137;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 137;
        for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
          current_statement__ = 137;
          current_statement__ = 137;
          check_greater_or_equal(function__, "D_pred[sym1__, sym2__]",
                                 D_pred[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 138;
      validate_non_negative_index("Dpos1", "D", D);
      current_statement__ = 139;
      context__.validate_dims("data initialization","Dpos1","int",
          context__.to_vec(D));
      Dpos1 = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 139;
      assign(Dpos1, nil_index_list(), context__.vals_i("Dpos1"),
        "assigning variable Dpos1");
      current_statement__ = 140;
      validate_non_negative_index("Dpos2", "D", D);
      current_statement__ = 141;
      context__.validate_dims("data initialization","Dpos2","int",
          context__.to_vec(D));
      Dpos2 = std::vector<int>(D, std::numeric_limits<int>::min());
      
      current_statement__ = 141;
      assign(Dpos2, nil_index_list(), context__.vals_i("Dpos2"),
        "assigning variable Dpos2");
      current_statement__ = 142;
      context__.validate_dims("data initialization","n_inno_covs","int",
          context__.to_vec());
      n_inno_covs = std::numeric_limits<int>::min();
      
      current_statement__ = 142;
      n_inno_covs = context__.vals_i("n_inno_covs")[(1 - 1)];
      current_statement__ = 143;
      context__.validate_dims("data initialization","n_obs_cov","int",
          context__.to_vec());
      n_obs_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 143;
      n_obs_cov = context__.vals_i("n_obs_cov")[(1 - 1)];
      current_statement__ = 144;
      validate_non_negative_index("inno_cov_pos", "n_inno_covs", n_inno_covs);
      current_statement__ = 145;
      context__.validate_dims("data initialization","inno_cov_pos","int",
          context__.to_vec(1, n_inno_covs));
      inno_cov_pos = std::vector<std::vector<int>>(1, std::vector<int>(n_inno_covs, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> inno_cov_pos_flat__;
        current_statement__ = 145;
        assign(inno_cov_pos_flat__, nil_index_list(),
          context__.vals_i("inno_cov_pos"),
          "assigning variable inno_cov_pos_flat__");
        current_statement__ = 145;
        pos__ = 1;
        current_statement__ = 145;
        for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
          current_statement__ = 145;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 145;
            assign(inno_cov_pos,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              inno_cov_pos_flat__[(pos__ - 1)],
              "assigning variable inno_cov_pos");
            current_statement__ = 145;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 146;
      validate_non_negative_index("b_free", "N", N);
      current_statement__ = 147;
      validate_non_negative_index("b_free", "n_random", n_random);
      current_statement__ = 148;
      validate_non_negative_index("sd_R", "n_random", n_random);
      current_statement__ = 149;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 149;
      sigma_1dim__ = (D - sum(innos_rand));
      current_statement__ = 149;
      validate_non_negative_index("sigma", "D - sum(innos_rand)",
                                  sigma_1dim__);
      current_statement__ = 150;
      validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 150;
      validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 151;
      validate_non_negative_index("y_impute", "n_miss", n_miss);
      current_statement__ = 152;
      validate_non_negative_index("gammas", "n_random", n_random);
      current_statement__ = 153;
      validate_non_negative_index("btw_free", "n_random", n_random);
      current_statement__ = 154;
      btw_free_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 154;
      btw_free_2dim__ = (n_cov - 1);
      current_statement__ = 154;
      validate_non_negative_index("btw_free", "n_cov - 1", btw_free_2dim__);
      current_statement__ = 155;
      validate_non_negative_index("b_fix", "n_fixed", n_fixed);
      current_statement__ = 156;
      validate_non_negative_index("eta_cov", "n_inno_covs", n_inno_covs);
      current_statement__ = 157;
      validate_non_negative_index("eta_cov", "n_obs_cov", n_obs_cov);
      current_statement__ = 158;
      validate_non_negative_index("bmu", "N", N);
      current_statement__ = 159;
      validate_non_negative_index("bmu", "n_random", n_random);
      current_statement__ = 160;
      validate_non_negative_index("b", "N", N);
      current_statement__ = 161;
      validate_non_negative_index("b", "n_pars", n_pars);
      current_statement__ = 162;
      validate_non_negative_index("sd_noise", "D", D);
      current_statement__ = 163;
      validate_non_negative_index("sd_noise", "N", N);
      current_statement__ = 164;
      validate_non_negative_index("sd_inncov", "n_inno_covs", n_inno_covs);
      current_statement__ = 165;
      validate_non_negative_index("sd_inncov", "N", N);
      current_statement__ = 166;
      validate_non_negative_index("btw_pred", "n_cov", n_cov);
      current_statement__ = 167;
      validate_non_negative_index("btw_pred", "n_random", n_random);
      current_statement__ = 168;
      validate_non_negative_index("bcorr", "n_random", n_random);
      current_statement__ = 169;
      validate_non_negative_index("bcorr", "n_random", n_random);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N * n_random;
      num_params_r__ += n_random;
      num_params_r__ += sigma_1dim__;
      num_params_r__ += ((n_random * (n_random - 1)) / 2);
      num_params_r__ += n_miss;
      num_params_r__ += n_random;
      num_params_r__ += n_random * btw_free_2dim__;
      num_params_r__ += n_fixed;
      num_params_r__ += n_inno_covs * n_obs_cov;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_VAR_manifestCovsRand_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(n_random));
      stan::math::fill(b_free, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(b_free, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_random), "assigning variable b_free");}
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_R;
      sd_R = Eigen::Matrix<local_scalar_t__, -1, 1>(n_random);
      stan::math::fill(sd_R, DUMMY_VAR__);
      
      current_statement__ = 2;
      sd_R = in__.vector(n_random);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0, lp__),
            "assigning variable sd_R");
        } else {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0),
            "assigning variable sd_R");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 3;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(n_random, n_random);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_random *
                                                         (n_random - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((n_random * (n_random - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, n_random, lp__),
          "assigning variable L");
      } else {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, n_random),
          "assigning variable L");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> y_impute;
      y_impute = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
      stan::math::fill(y_impute, DUMMY_VAR__);
      
      current_statement__ = 5;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<local_scalar_t__, 1, -1> gammas;
      gammas = Eigen::Matrix<local_scalar_t__, 1, -1>(n_random);
      stan::math::fill(gammas, DUMMY_VAR__);
      
      current_statement__ = 6;
      gammas = in__.row_vector(n_random);
      Eigen::Matrix<local_scalar_t__, -1, -1> btw_free;
      btw_free = Eigen::Matrix<local_scalar_t__, -1, -1>(n_random, btw_free_2dim__);
      stan::math::fill(btw_free, DUMMY_VAR__);
      
      current_statement__ = 7;
      btw_free = in__.matrix(n_random, btw_free_2dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_fix;
      b_fix = Eigen::Matrix<local_scalar_t__, -1, 1>(n_fixed);
      stan::math::fill(b_fix, DUMMY_VAR__);
      
      current_statement__ = 8;
      b_fix = in__.vector(n_fixed);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> eta_cov;
      eta_cov = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_inno_covs, Eigen::Matrix<local_scalar_t__, -1, 1>(n_obs_cov));
      stan::math::fill(eta_cov, DUMMY_VAR__);
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
        current_statement__ = 9;
        assign(eta_cov, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_obs_cov), "assigning variable eta_cov");}
      Eigen::Matrix<local_scalar_t__, -1, -1> bmu;
      bmu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_random);
      stan::math::fill(bmu, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> b;
      b = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(n_pars));
      stan::math::fill(b, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> sd_noise;
      sd_noise = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(D, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(sd_noise, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> sd_inncov;
      sd_inncov = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_inno_covs, Eigen::Matrix<local_scalar_t__, -1, 1>(N));
      stan::math::fill(sd_inncov, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> btw_pred;
      btw_pred = Eigen::Matrix<local_scalar_t__, -1, -1>(n_cov, n_random);
      stan::math::fill(btw_pred, DUMMY_VAR__);
      
      current_statement__ = 15;
      assign(btw_pred,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable btw_pred");
      current_statement__ = 18;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 16;
        assign(btw_pred,
          cons_list(index_uni(2), cons_list(index_omni(), nil_index_list())),
          to_row_vector(
            rvalue(btw_free,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "btw_free")),
          "assigning variable btw_pred");
      } 
      current_statement__ = 19;
      assign(bmu, nil_index_list(), multiply(W, btw_pred),
        "assigning variable bmu");
      current_statement__ = 22;
      for (int i = 1; i <= n_random; ++i) {
        current_statement__ = 20;
        assign(b,
          cons_list(index_omni(),
            cons_list(index_uni(is_random[(i - 1)]), nil_index_list())),
          rvalue(b_free,
            cons_list(index_omni(),
              cons_list(index_uni(i), nil_index_list())), "b_free"),
          "assigning variable b");}
      current_statement__ = 27;
      if (logical_gt(n_fixed, 0)) {
        current_statement__ = 25;
        for (int i = 1; i <= n_fixed; ++i) {
          current_statement__ = 23;
          assign(b,
            cons_list(index_omni(),
              cons_list(index_uni(is_fixed[(1 - 1)][(i - 1)]),
                nil_index_list())),
            to_array_1d(rep_vector(b_fix[(i - 1)], N)),
            "assigning variable b");}
      } 
      current_statement__ = 34;
      for (int i = 1; i <= D; ++i) {
        current_statement__ = 32;
        if (logical_eq(innos_rand[(i - 1)], 0)) {
          current_statement__ = 30;
          assign(sd_noise,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())),
            rep_vector(sigma[(innos_fix_pos[(i - 1)] - 1)], N),
            "assigning variable sd_noise");
        } else {
          current_statement__ = 28;
          assign(sd_noise,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())),
            stan::math::sqrt(
              stan::math::exp(
                to_vector(
                  rvalue(b,
                    cons_list(index_omni(),
                      cons_list(index_uni(innos_pos[(i - 1)]),
                        nil_index_list())), "b")))),
            "assigning variable sd_noise");
        }}
      current_statement__ = 37;
      for (int i = 1; i <= n_inno_covs; ++i) {
        current_statement__ = 35;
        assign(sd_inncov,
          cons_list(index_uni(i),
            cons_list(index_min_max(1, N), nil_index_list())),
          stan::math::sqrt(
            stan::math::exp(
              to_vector(
                rvalue(b,
                  cons_list(index_omni(),
                    cons_list(index_uni(inno_cov_pos[(1 - 1)][(i - 1)]),
                      nil_index_list())), "b")))),
          "assigning variable sd_inncov");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 12;
          current_statement__ = 12;
          check_greater_or_equal(function__, "sd_noise[sym1__, sym2__]",
                                 sd_noise[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 13;
          current_statement__ = 13;
          check_greater_or_equal(function__, "sd_inncov[sym1__, sym2__]",
                                 sd_inncov[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 40;
        pos = 1;
        int pos_cov;
        pos_cov = std::numeric_limits<int>::min();
        
        current_statement__ = 41;
        pos_cov = 1;
        int p_miss;
        p_miss = std::numeric_limits<int>::min();
        
        current_statement__ = 42;
        p_miss = 1;
        int obs_id;
        obs_id = std::numeric_limits<int>::min();
        
        current_statement__ = 43;
        obs_id = 1;
        current_statement__ = 44;
        validate_non_negative_index("SIGMA", "n_random", n_random);
        current_statement__ = 45;
        validate_non_negative_index("SIGMA", "n_random", n_random);
        Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA;
        SIGMA = Eigen::Matrix<local_scalar_t__, -1, -1>(n_random, n_random);
        stan::math::fill(SIGMA, DUMMY_VAR__);
        
        current_statement__ = 46;
        assign(SIGMA, nil_index_list(), diag_pre_multiply(sd_R, L),
          "assigning variable SIGMA");
        current_statement__ = 47;
        validate_non_negative_index("y_merge", "D", D);
        current_statement__ = 48;
        validate_non_negative_index("y_merge", "N_obs", N_obs);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y_merge;
        y_merge = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(D, Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs));
        stan::math::fill(y_merge, DUMMY_VAR__);
        
        current_statement__ = 50;
        assign(y_merge, nil_index_list(), y, "assigning variable y_merge");
        current_statement__ = 56;
        if (logical_gt(n_miss, 0)) {
          current_statement__ = 54;
          for (int i = 1; i <= D; ++i) {
            current_statement__ = 51;
            assign(y_merge,
              cons_list(index_uni(i),
                cons_list(
                  index_multi(rvalue(pos_miss_D,
                                cons_list(index_uni(i),
                                  cons_list(
                                    index_min_max(1, n_miss_D[(i - 1)]),
                                    nil_index_list())), "pos_miss_D")),
                  nil_index_list())),
              segment(y_impute, p_miss, n_miss_D[(i - 1)]),
              "assigning variable y_merge");
            current_statement__ = 52;
            p_miss = (p_miss + n_miss_D[(i - 1)]);}
        } 
        current_statement__ = 57;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L, 1));
        current_statement__ = 58;
        lp_accum__.add(cauchy_lpdf<propto__>(sigma, 0, 2.5));
        current_statement__ = 64;
        for (int i = 1; i <= n_random; ++i) {
          current_statement__ = 59;
          lp_accum__.add(normal_lpdf<propto__>(gammas[(i - 1)], 0, 10));
          current_statement__ = 62;
          if (logical_gt(n_cov, 1)) {
            current_statement__ = 60;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(btw_free,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "btw_free"),
                0, 2));
          } }
        current_statement__ = 67;
        if (logical_gt(n_fixed, 0)) {
          current_statement__ = 65;
          lp_accum__.add(normal_lpdf<propto__>(b_fix, 0, 2));
        } 
        current_statement__ = 100;
        for (int pp = 1; pp <= N; ++pp) {
          current_statement__ = 68;
          obs_id = N_obs_id[(pp - 1)];
          current_statement__ = 69;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(b_free,
                cons_list(index_uni(pp),
                  cons_list(index_min_max(1, n_random), nil_index_list())),
                "b_free"),
              rvalue(bmu,
                cons_list(index_uni(pp),
                  cons_list(index_min_max(1, n_random), nil_index_list())),
                "bmu"), SIGMA));
          current_statement__ = 70;
          validate_non_negative_index("mus", "D", D);
          current_statement__ = 71;
          validate_non_negative_index("mus", "obs_id - 1", (obs_id - 1));
          std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> mus;
          mus = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(D, Eigen::Matrix<local_scalar_t__, -1, 1>(
            (obs_id - 1)));
          stan::math::fill(mus, DUMMY_VAR__);
          
          current_statement__ = 73;
          validate_non_negative_index("y_cen", "D", D);
          current_statement__ = 74;
          validate_non_negative_index("y_cen", "obs_id", obs_id);
          std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> y_cen;
          y_cen = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(D, Eigen::Matrix<local_scalar_t__, -1, 1>(obs_id));
          stan::math::fill(y_cen, DUMMY_VAR__);
          
          current_statement__ = 78;
          for (int d = 1; d <= D; ++d) {
            current_statement__ = 76;
            assign(y_cen,
              cons_list(index_uni(d),
                cons_list(index_omni(), nil_index_list())),
              subtract(
                rvalue(y_merge,
                  cons_list(index_uni(d),
                    cons_list(index_min_max(pos, ((pos + obs_id) - 1)),
                      nil_index_list())), "y_merge"), b[(pp - 1)][(d - 1)]),
              "assigning variable y_cen");}
          current_statement__ = 79;
          validate_non_negative_index("eta_cov_id", "n_inno_covs",
                                      n_inno_covs);
          current_statement__ = 80;
          validate_non_negative_index("eta_cov_id", "obs_id - 1",
                                      (obs_id - 1));
          std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> eta_cov_id;
          eta_cov_id = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_inno_covs, Eigen::Matrix<local_scalar_t__, -1, 1>(
            (obs_id - 1)));
          stan::math::fill(eta_cov_id, DUMMY_VAR__);
          
          current_statement__ = 85;
          for (int i = 1; i <= n_inno_covs; ++i) {
            current_statement__ = 82;
            assign(eta_cov_id,
              cons_list(index_uni(i),
                cons_list(index_omni(), nil_index_list())),
              segment(
                rvalue(eta_cov,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "eta_cov"),
                pos_cov, (obs_id - 1)), "assigning variable eta_cov_id");
            current_statement__ = 83;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(eta_cov_id,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "eta_cov_id"),
                0, sd_inncov[(i - 1)][(pp - 1)]));}
          current_statement__ = 96;
          for (int d = 1; d <= D; ++d) {
            {
              current_statement__ = 86;
              validate_non_negative_index("b_mat", "(obs_id - 1)",
                                          (obs_id - 1));
              current_statement__ = 87;
              validate_non_negative_index("b_mat", "N_pred[d]",
                                          N_pred[(d - 1)]);
              Eigen::Matrix<local_scalar_t__, -1, -1> b_mat;
              b_mat = Eigen::Matrix<local_scalar_t__, -1, -1>((obs_id - 1), N_pred[
                (d - 1)]);
              stan::math::fill(b_mat, DUMMY_VAR__);
              
              current_statement__ = 91;
              for (int nd = 1; nd <= N_pred[(d - 1)]; ++nd) {
                current_statement__ = 89;
                assign(b_mat,
                  cons_list(index_omni(),
                    cons_list(index_uni(nd), nil_index_list())),
                  rvalue(y_cen,
                    cons_list(index_uni(D_pred[(d - 1)][(nd - 1)]),
                      cons_list(index_min_max(1, (obs_id - 1)),
                        nil_index_list())), "y_cen"),
                  "assigning variable b_mat");}
              current_statement__ = 92;
              assign(mus,
                cons_list(index_uni(d),
                  cons_list(index_omni(), nil_index_list())),
                add(
                  add(b[(pp - 1)][(d - 1)],
                    multiply(b_mat,
                      rvalue(b,
                        cons_list(index_uni(pp),
                          cons_list(
                            index_min_max(Dpos1[(d - 1)], Dpos2[(d - 1)]),
                            nil_index_list())), "b"))),
                  rvalue(eta_cov_id,
                    cons_list(index_uni(1),
                      cons_list(index_omni(), nil_index_list())),
                    "eta_cov_id")), "assigning variable mus");
            }
            current_statement__ = 94;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(y_merge,
                  cons_list(index_uni(d),
                    cons_list(index_min_max((pos + 1), (pos + (obs_id - 1))),
                      nil_index_list())), "y_merge"),
                rvalue(mus,
                  cons_list(index_uni(d),
                    cons_list(index_omni(), nil_index_list())), "mus"),
                sd_noise[(d - 1)][(pp - 1)]));}
          current_statement__ = 97;
          pos = (pos + obs_id);
          current_statement__ = 98;
          pos_cov = ((pos_cov + obs_id) - 1);}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_VAR_manifestCovsRand_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(n_random));
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(b_free, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_random), "assigning variable b_free");}
      Eigen::Matrix<double, -1, 1> sd_R;
      sd_R = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sd_R = in__.vector(n_random);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0),
          "assigning variable sd_R");}
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_random *
                                                         (n_random - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((n_random * (n_random - 1)) / 2));
      current_statement__ = 4;
      assign(L, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_in__, n_random),
        "assigning variable L");
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(n_random);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      gammas = in__.row_vector(n_random);
      Eigen::Matrix<double, -1, -1> btw_free;
      btw_free = Eigen::Matrix<double, -1, -1>(n_random, btw_free_2dim__);
      stan::math::fill(btw_free, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      btw_free = in__.matrix(n_random, btw_free_2dim__);
      Eigen::Matrix<double, -1, 1> b_fix;
      b_fix = Eigen::Matrix<double, -1, 1>(n_fixed);
      stan::math::fill(b_fix, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      b_fix = in__.vector(n_fixed);
      std::vector<Eigen::Matrix<double, -1, 1>> eta_cov;
      eta_cov = std::vector<Eigen::Matrix<double, -1, 1>>(n_inno_covs, Eigen::Matrix<double, -1, 1>(n_obs_cov));
      stan::math::fill(eta_cov, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
        current_statement__ = 9;
        assign(eta_cov, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_obs_cov), "assigning variable eta_cov");}
      Eigen::Matrix<double, -1, -1> bmu;
      bmu = Eigen::Matrix<double, -1, -1>(N, n_random);
      stan::math::fill(bmu, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> b;
      b = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(n_pars));
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> sd_noise;
      sd_noise = std::vector<Eigen::Matrix<double, -1, 1>>(D, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(sd_noise, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> sd_inncov;
      sd_inncov = std::vector<Eigen::Matrix<double, -1, 1>>(n_inno_covs, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(sd_inncov, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> btw_pred;
      btw_pred = Eigen::Matrix<double, -1, -1>(n_cov, n_random);
      stan::math::fill(btw_pred, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(b_free[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(sd_R[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= btw_free_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(btw_free,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "btw_free"));
        }}
      for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
        vars__.emplace_back(b_fix[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_obs_cov; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
          vars__.emplace_back(eta_cov[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      assign(btw_pred,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable btw_pred");
      current_statement__ = 18;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 16;
        assign(btw_pred,
          cons_list(index_uni(2), cons_list(index_omni(), nil_index_list())),
          to_row_vector(
            rvalue(btw_free,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "btw_free")),
          "assigning variable btw_pred");
      } 
      current_statement__ = 19;
      assign(bmu, nil_index_list(), multiply(W, btw_pred),
        "assigning variable bmu");
      current_statement__ = 22;
      for (int i = 1; i <= n_random; ++i) {
        current_statement__ = 20;
        assign(b,
          cons_list(index_omni(),
            cons_list(index_uni(is_random[(i - 1)]), nil_index_list())),
          rvalue(b_free,
            cons_list(index_omni(),
              cons_list(index_uni(i), nil_index_list())), "b_free"),
          "assigning variable b");}
      current_statement__ = 27;
      if (logical_gt(n_fixed, 0)) {
        current_statement__ = 25;
        for (int i = 1; i <= n_fixed; ++i) {
          current_statement__ = 23;
          assign(b,
            cons_list(index_omni(),
              cons_list(index_uni(is_fixed[(1 - 1)][(i - 1)]),
                nil_index_list())),
            to_array_1d(rep_vector(b_fix[(i - 1)], N)),
            "assigning variable b");}
      } 
      current_statement__ = 34;
      for (int i = 1; i <= D; ++i) {
        current_statement__ = 32;
        if (logical_eq(innos_rand[(i - 1)], 0)) {
          current_statement__ = 30;
          assign(sd_noise,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())),
            rep_vector(sigma[(innos_fix_pos[(i - 1)] - 1)], N),
            "assigning variable sd_noise");
        } else {
          current_statement__ = 28;
          assign(sd_noise,
            cons_list(index_uni(i),
              cons_list(index_omni(), nil_index_list())),
            stan::math::sqrt(
              stan::math::exp(
                to_vector(
                  rvalue(b,
                    cons_list(index_omni(),
                      cons_list(index_uni(innos_pos[(i - 1)]),
                        nil_index_list())), "b")))),
            "assigning variable sd_noise");
        }}
      current_statement__ = 37;
      for (int i = 1; i <= n_inno_covs; ++i) {
        current_statement__ = 35;
        assign(sd_inncov,
          cons_list(index_uni(i),
            cons_list(index_min_max(1, N), nil_index_list())),
          stan::math::sqrt(
            stan::math::exp(
              to_vector(
                rvalue(b,
                  cons_list(index_omni(),
                    cons_list(index_uni(inno_cov_pos[(1 - 1)][(i - 1)]),
                      nil_index_list())), "b")))),
          "assigning variable sd_inncov");}
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 12;
          current_statement__ = 12;
          check_greater_or_equal(function__, "sd_noise[sym1__, sym2__]",
                                 sd_noise[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
        current_statement__ = 13;
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          current_statement__ = 13;
          current_statement__ = 13;
          check_greater_or_equal(function__, "sd_inncov[sym1__, sym2__]",
                                 sd_inncov[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(bmu,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "bmu"));}}
        for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(b[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            vars__.emplace_back(sd_noise[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
            vars__.emplace_back(sd_inncov[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            vars__.emplace_back(
              rvalue(btw_pred,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "btw_pred"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> bcorr;
      bcorr = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(bcorr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 39;
      assign(bcorr, nil_index_list(), multiply_lower_tri_self_transpose(L),
        "assigning variable bcorr");
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(bcorr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "bcorr"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(n_random));
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_free_flat__;
        current_statement__ = 1;
        assign(b_free_flat__, nil_index_list(), context__.vals_r("b_free"),
          "assigning variable b_free_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            assign(b_free,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              b_free_flat__[(pos__ - 1)], "assigning variable b_free");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> sd_R;
      sd_R = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sd_R_flat__;
        current_statement__ = 2;
        assign(sd_R_flat__, nil_index_list(), context__.vals_r("sd_R"),
          "assigning variable sd_R_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            sd_R_flat__[(pos__ - 1)], "assigning variable sd_R");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sd_R_free__;
      sd_R_free__ = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        assign(sd_R_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sd_R[(sym1__ - 1)], 0),
          "assigning variable sd_R_free__");}
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 3;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 4;
        assign(L_flat__, nil_index_list(), context__.vals_r("L"),
          "assigning variable L_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 4;
            assign(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_flat__[(pos__ - 1)], "assigning variable L");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_free__;
      L_free__ = Eigen::Matrix<double, -1, 1>(((n_random * (n_random - 1)) /
                                                2));
      stan::math::fill(L_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(L_free__, nil_index_list(), stan::math::cholesky_corr_free(L),
        "assigning variable L_free__");
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_impute_flat__;
        current_statement__ = 5;
        assign(y_impute_flat__, nil_index_list(),
          context__.vals_r("y_impute"), "assigning variable y_impute_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
          current_statement__ = 5;
          assign(y_impute, cons_list(index_uni(sym1__), nil_index_list()),
            y_impute_flat__[(pos__ - 1)], "assigning variable y_impute");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(n_random);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gammas_flat__;
        current_statement__ = 6;
        assign(gammas_flat__, nil_index_list(), context__.vals_r("gammas"),
          "assigning variable gammas_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 6;
          assign(gammas, cons_list(index_uni(sym1__), nil_index_list()),
            gammas_flat__[(pos__ - 1)], "assigning variable gammas");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, -1> btw_free;
      btw_free = Eigen::Matrix<double, -1, -1>(n_random, btw_free_2dim__);
      stan::math::fill(btw_free, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> btw_free_flat__;
        current_statement__ = 7;
        assign(btw_free_flat__, nil_index_list(),
          context__.vals_r("btw_free"), "assigning variable btw_free_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= btw_free_2dim__; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 7;
            assign(btw_free,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              btw_free_flat__[(pos__ - 1)], "assigning variable btw_free");
            current_statement__ = 7;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> b_fix;
      b_fix = Eigen::Matrix<double, -1, 1>(n_fixed);
      stan::math::fill(b_fix, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_fix_flat__;
        current_statement__ = 8;
        assign(b_fix_flat__, nil_index_list(), context__.vals_r("b_fix"),
          "assigning variable b_fix_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
          current_statement__ = 8;
          assign(b_fix, cons_list(index_uni(sym1__), nil_index_list()),
            b_fix_flat__[(pos__ - 1)], "assigning variable b_fix");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> eta_cov;
      eta_cov = std::vector<Eigen::Matrix<double, -1, 1>>(n_inno_covs, Eigen::Matrix<double, -1, 1>(n_obs_cov));
      stan::math::fill(eta_cov, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> eta_cov_flat__;
        current_statement__ = 9;
        assign(eta_cov_flat__, nil_index_list(), context__.vals_r("eta_cov"),
          "assigning variable eta_cov_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_obs_cov; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
            current_statement__ = 9;
            assign(eta_cov,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              eta_cov_flat__[(pos__ - 1)], "assigning variable eta_cov");
            current_statement__ = 9;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(b_free[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(sd_R_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((n_random * (n_random - 1)) / 2);
           ++sym1__) { vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= btw_free_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(btw_free,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "btw_free"));
        }}
      for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
        vars__.emplace_back(b_fix[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_inno_covs; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_obs_cov; ++sym2__) {
          vars__.emplace_back(eta_cov[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b_free");
    names__.emplace_back("sd_R");
    names__.emplace_back("sigma");
    names__.emplace_back("L");
    names__.emplace_back("y_impute");
    names__.emplace_back("gammas");
    names__.emplace_back("btw_free");
    names__.emplace_back("b_fix");
    names__.emplace_back("eta_cov");
    names__.emplace_back("bmu");
    names__.emplace_back("b");
    names__.emplace_back("sd_noise");
    names__.emplace_back("sd_inncov");
    names__.emplace_back("btw_pred");
    names__.emplace_back("bcorr");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_miss)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random),
                                             static_cast<size_t>(btw_free_2dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_fixed)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_inno_covs)
                                             , static_cast<size_t>(n_obs_cov)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_pars)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(D),
                                             static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_inno_covs)
                                             , static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_cov),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random),
                                             static_cast<size_t>(n_random)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= btw_free_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "btw_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_fix" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_obs_cov; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "eta_cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_noise" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_inncov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "btw_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((n_random * (n_random - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= btw_free_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "btw_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_fix" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_obs_cov; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "eta_cov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= D; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_noise" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_inno_covs; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "sd_inncov" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "btw_pred" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_random << "}},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"btw_free\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << btw_free_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_fix\",\"type\":{\"name\":\"vector\",\"length\":" << n_fixed << "},\"block\":\"parameters\"},{\"name\":\"eta_cov\",\"type\":{\"name\":\"array\",\"length\":" << n_inno_covs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_obs_cov << "}},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_pars << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"array\",\"length\":" << D << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sd_inncov\",\"type\":{\"name\":\"array\",\"length\":" << n_inno_covs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"btw_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_random << "}},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" << ((n_random * (n_random - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"btw_free\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << btw_free_2dim__ << "},\"block\":\"parameters\"},{\"name\":\"b_fix\",\"type\":{\"name\":\"vector\",\"length\":" << n_fixed << "},\"block\":\"parameters\"},{\"name\":\"eta_cov\",\"type\":{\"name\":\"array\",\"length\":" << n_inno_covs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_obs_cov << "}},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_pars << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"array\",\"length\":" << D << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"sd_inncov\",\"type\":{\"name\":\"array\",\"length\":" << n_inno_covs << ",\"element_type\":{\"name\":\"vector\",\"length\":" << N << "}},\"block\":\"transformed_parameters\"},{\"name\":\"btw_pred\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_VAR_manifestCovsRand_namespace::model_VAR_manifestCovsRand;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_VAR_manifestCovsRand_namespace::profiles__;
}
#endif
#endif
