// Generated by rstantools.  Do not edit by hand.

/*
    dsemr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dsemr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dsemr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_AR_manifest_intOnly_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 34, column 2 to column 19)",
                                                      " (in 'string', line 35, column 2 to column 12)",
                                                      " (in 'string', line 36, column 2 to column 26)",
                                                      " (in 'string', line 37, column 2 to column 23)",
                                                      " (in 'string', line 38, column 2 to column 22)",
                                                      " (in 'string', line 39, column 2 to column 10)",
                                                      " (in 'string', line 40, column 2 to column 33)",
                                                      " (in 'string', line 44, column 2 to column 19)",
                                                      " (in 'string', line 45, column 2 to column 14)",
                                                      " (in 'string', line 47, column 2 to column 33)",
                                                      " (in 'string', line 48, column 2 to column 29)",
                                                      " (in 'string', line 52, column 7 to column 30)",
                                                      " (in 'string', line 51, column 22 to line 53, column 5)",
                                                      " (in 'string', line 51, column 5 to line 53, column 5)",
                                                      " (in 'string', line 56, column 4 to column 64)",
                                                      " (in 'string', line 55, column 24 to line 57, column 3)",
                                                      " (in 'string', line 55, column 4 to line 57, column 3)",
                                                      " (in 'string', line 49, column 13 to line 58, column 2)",
                                                      " (in 'string', line 49, column 2 to line 58, column 2)",
                                                      " (in 'string', line 60, column 2 to column 26)",
                                                      " (in 'string', line 62, column 2 to column 13)",
                                                      " (in 'string', line 65, column 2 to column 14)",
                                                      " (in 'string', line 66, column 2 to column 17)",
                                                      " (in 'string', line 67, column 9 to column 14)",
                                                      " (in 'string', line 67, column 2 to column 24)",
                                                      " (in 'string', line 68, column 2 to column 14)",
                                                      " (in 'string', line 71, column 4 to column 33)",
                                                      " (in 'string', line 69, column 14 to line 72, column 3)",
                                                      " (in 'string', line 69, column 2 to line 72, column 3)",
                                                      " (in 'string', line 74, column 2 to column 50)",
                                                      " (in 'string', line 75, column 2 to column 53)",
                                                      " (in 'string', line 77, column 2 to column 20)",
                                                      " (in 'string', line 79, column 2 to column 53)",
                                                      " (in 'string', line 81, column 4 to column 96)",
                                                      " (in 'string', line 80, column 13 to line 82, column 3)",
                                                      " (in 'string', line 80, column 0 to line 82, column 3)",
                                                      " (in 'string', line 84, column 2 to column 44)",
                                                      " (in 'string', line 87, column 4 to column 26)",
                                                      " (in 'string', line 90, column 11 to column 19)",
                                                      " (in 'string', line 90, column 4 to column 25)",
                                                      " (in 'string', line 93, column 11 to column 17)",
                                                      " (in 'string', line 93, column 4 to column 25)",
                                                      " (in 'string', line 94, column 4 to column 48)",
                                                      " (in 'string', line 96, column 4 to column 44)",
                                                      " (in 'string', line 98, column 4 to column 59)",
                                                      " (in 'string', line 89, column 4 to line 99, column 5)",
                                                      " (in 'string', line 101, column 4 to column 23)",
                                                      " (in 'string', line 85, column 18 to line 102, column 3)",
                                                      " (in 'string', line 85, column 2 to line 102, column 3)",
                                                      " (in 'string', line 3, column 2 to column 17)",
                                                      " (in 'string', line 4, column 2 to column 21)",
                                                      " (in 'string', line 5, column 24 to column 25)",
                                                      " (in 'string', line 5, column 2 to column 27)",
                                                      " (in 'string', line 6, column 9 to column 14)",
                                                      " (in 'string', line 6, column 2 to column 18)",
                                                      " (in 'string', line 8, column 2 to column 13)",
                                                      " (in 'string', line 9, column 15 to column 21)",
                                                      " (in 'string', line 9, column 2 to column 23)",
                                                      " (in 'string', line 11, column 2 to column 12)",
                                                      " (in 'string', line 12, column 2 to column 15)",
                                                      " (in 'string', line 13, column 16 to column 24)",
                                                      " (in 'string', line 13, column 2 to column 29)",
                                                      " (in 'string', line 14, column 9 to column 10)",
                                                      " (in 'string', line 14, column 12 to column 17)",
                                                      " (in 'string', line 14, column 2 to column 21)",
                                                      " (in 'string', line 16, column 2 to column 22)",
                                                      " (in 'string', line 17, column 2 to column 24)",
                                                      " (in 'string', line 18, column 2 to column 23)",
                                                      " (in 'string', line 19, column 2 to column 25)",
                                                      " (in 'string', line 20, column 2 to column 23)",
                                                      " (in 'string', line 21, column 2 to column 25)",
                                                      " (in 'string', line 22, column 11 to column 19)",
                                                      " (in 'string', line 22, column 2 to column 41)",
                                                      " (in 'string', line 23, column 11 to column 19)",
                                                      " (in 'string', line 23, column 2 to column 43)",
                                                      " (in 'string', line 26, column 2 to column 19)",
                                                      " (in 'string', line 30, column 4 to column 28)",
                                                      " (in 'string', line 29, column 9 to line 31, column 3)",
                                                      " (in 'string', line 28, column 4 to column 21)",
                                                      " (in 'string', line 27, column 14 to line 29, column 3)",
                                                      " (in 'string', line 27, column 2 to line 31, column 3)",
                                                      " (in 'string', line 34, column 9 to column 10)",
                                                      " (in 'string', line 36, column 9 to column 15)",
                                                      " (in 'string', line 37, column 13 to column 14)",
                                                      " (in 'string', line 40, column 9 to column 21)",
                                                      " (in 'string', line 44, column 9 to column 10)",
                                                      " (in 'string', line 44, column 12 to column 13)",
                                                      " (in 'string', line 45, column 9 to column 10)",
                                                      " (in 'string', line 47, column 9 to column 14)",
                                                      " (in 'string', line 47, column 16 to column 17)"};
#include <stan_meta_header.hpp>
class model_AR_manifest_intOnly final : public model_base_crtp<model_AR_manifest_intOnly> {
private:
  int N;
  int N_obs;
  std::vector<int> N_obs_id;
  Eigen::Matrix<double, -1, 1> y;
  int n_miss;
  std::vector<int> pos_miss;
  int n_cov;
  int n_cov_bs;
  std::vector<std::vector<int>> n_cov_mat;
  Eigen::Matrix<double, -1, -1> W;
  double prior_sd_R_loc;
  double prior_sd_R_scale;
  double prior_gamma_loc;
  double prior_gamma_scale;
  double prior_sigma_loc;
  double prior_sigma_scale;
  Eigen::Matrix<double, -1, -1> prior_b_re_pred_loc;
  Eigen::Matrix<double, -1, -1> prior_b_re_pred_scale;
  int n_cov_bs_use;
 
public:
  ~model_AR_manifest_intOnly() { }
  
  inline std::string model_name() const final { return "model_AR_manifest_intOnly"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_AR_manifest_intOnly(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_AR_manifest_intOnly_namespace::model_AR_manifest_intOnly";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 50;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 51;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 52;
      validate_non_negative_index("N_obs_id", "N", N);
      current_statement__ = 53;
      context__.validate_dims("data initialization","N_obs_id","int",
          context__.to_vec(N));
      N_obs_id = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 53;
      assign(N_obs_id, nil_index_list(), context__.vals_i("N_obs_id"),
        "assigning variable N_obs_id");
      current_statement__ = 53;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 53;
        current_statement__ = 53;
        check_greater_or_equal(function__, "N_obs_id[sym1__]",
                               N_obs_id[(sym1__ - 1)], 1);}
      current_statement__ = 54;
      validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 55;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N_obs));
      y = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 55;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 55;
        pos__ = 1;
        current_statement__ = 55;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 55;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 55;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 56;
      context__.validate_dims("data initialization","n_miss","int",
          context__.to_vec());
      n_miss = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      n_miss = context__.vals_i("n_miss")[(1 - 1)];
      current_statement__ = 57;
      validate_non_negative_index("pos_miss", "n_miss", n_miss);
      current_statement__ = 58;
      context__.validate_dims("data initialization","pos_miss","int",
          context__.to_vec(n_miss));
      pos_miss = std::vector<int>(n_miss, std::numeric_limits<int>::min());
      
      current_statement__ = 58;
      assign(pos_miss, nil_index_list(), context__.vals_i("pos_miss"),
        "assigning variable pos_miss");
      current_statement__ = 59;
      context__.validate_dims("data initialization","n_cov","int",
          context__.to_vec());
      n_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 59;
      n_cov = context__.vals_i("n_cov")[(1 - 1)];
      current_statement__ = 60;
      context__.validate_dims("data initialization","n_cov_bs","int",
          context__.to_vec());
      n_cov_bs = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      n_cov_bs = context__.vals_i("n_cov_bs")[(1 - 1)];
      current_statement__ = 61;
      validate_non_negative_index("n_cov_mat", "n_cov_bs", n_cov_bs);
      current_statement__ = 62;
      context__.validate_dims("data initialization","n_cov_mat","int",
          context__.to_vec(n_cov_bs, 2));
      n_cov_mat = std::vector<std::vector<int>>(n_cov_bs, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> n_cov_mat_flat__;
        current_statement__ = 62;
        assign(n_cov_mat_flat__, nil_index_list(),
          context__.vals_i("n_cov_mat"),
          "assigning variable n_cov_mat_flat__");
        current_statement__ = 62;
        pos__ = 1;
        current_statement__ = 62;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 62;
          for (int sym2__ = 1; sym2__ <= n_cov_bs; ++sym2__) {
            current_statement__ = 62;
            assign(n_cov_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_cov_mat_flat__[(pos__ - 1)], "assigning variable n_cov_mat");
            current_statement__ = 62;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 63;
      validate_non_negative_index("W", "N", N);
      current_statement__ = 64;
      validate_non_negative_index("W", "n_cov", n_cov);
      current_statement__ = 65;
      context__.validate_dims("data initialization","W","double",
          context__.to_vec(N, n_cov));
      W = Eigen::Matrix<double, -1, -1>(N, n_cov);
      stan::math::fill(W, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 65;
        assign(W_flat__, nil_index_list(), context__.vals_r("W"),
          "assigning variable W_flat__");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        for (int sym1__ = 1; sym1__ <= n_cov; ++sym1__) {
          current_statement__ = 65;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 65;
            assign(W,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              W_flat__[(pos__ - 1)], "assigning variable W");
            current_statement__ = 65;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 66;
      context__.validate_dims("data initialization","prior_sd_R_loc",
          "double",context__.to_vec());
      prior_sd_R_loc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 66;
      prior_sd_R_loc = context__.vals_r("prior_sd_R_loc")[(1 - 1)];
      current_statement__ = 67;
      context__.validate_dims("data initialization","prior_sd_R_scale",
          "double",context__.to_vec());
      prior_sd_R_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 67;
      prior_sd_R_scale = context__.vals_r("prior_sd_R_scale")[(1 - 1)];
      current_statement__ = 68;
      context__.validate_dims("data initialization","prior_gamma_loc",
          "double",context__.to_vec());
      prior_gamma_loc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 68;
      prior_gamma_loc = context__.vals_r("prior_gamma_loc")[(1 - 1)];
      current_statement__ = 69;
      context__.validate_dims("data initialization","prior_gamma_scale",
          "double",context__.to_vec());
      prior_gamma_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 69;
      prior_gamma_scale = context__.vals_r("prior_gamma_scale")[(1 - 1)];
      current_statement__ = 70;
      context__.validate_dims("data initialization","prior_sigma_loc",
          "double",context__.to_vec());
      prior_sigma_loc = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 70;
      prior_sigma_loc = context__.vals_r("prior_sigma_loc")[(1 - 1)];
      current_statement__ = 71;
      context__.validate_dims("data initialization","prior_sigma_scale",
          "double",context__.to_vec());
      prior_sigma_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 71;
      prior_sigma_scale = context__.vals_r("prior_sigma_scale")[(1 - 1)];
      current_statement__ = 72;
      validate_non_negative_index("prior_b_re_pred_loc", "n_cov_bs", n_cov_bs);
      current_statement__ = 73;
      context__.validate_dims("data initialization","prior_b_re_pred_loc",
          "double",context__.to_vec(1, n_cov_bs));
      prior_b_re_pred_loc = Eigen::Matrix<double, -1, -1>(1, n_cov_bs);
      stan::math::fill(prior_b_re_pred_loc, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_b_re_pred_loc_flat__;
        current_statement__ = 73;
        assign(prior_b_re_pred_loc_flat__, nil_index_list(),
          context__.vals_r("prior_b_re_pred_loc"),
          "assigning variable prior_b_re_pred_loc_flat__");
        current_statement__ = 73;
        pos__ = 1;
        current_statement__ = 73;
        for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
          current_statement__ = 73;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 73;
            assign(prior_b_re_pred_loc,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_b_re_pred_loc_flat__[(pos__ - 1)],
              "assigning variable prior_b_re_pred_loc");
            current_statement__ = 73;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 74;
      validate_non_negative_index("prior_b_re_pred_scale", "n_cov_bs",
                                  n_cov_bs);
      current_statement__ = 75;
      context__.validate_dims("data initialization","prior_b_re_pred_scale",
          "double",context__.to_vec(1, n_cov_bs));
      prior_b_re_pred_scale = Eigen::Matrix<double, -1, -1>(1, n_cov_bs);
      stan::math::fill(prior_b_re_pred_scale, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_b_re_pred_scale_flat__;
        current_statement__ = 75;
        assign(prior_b_re_pred_scale_flat__, nil_index_list(),
          context__.vals_r("prior_b_re_pred_scale"),
          "assigning variable prior_b_re_pred_scale_flat__");
        current_statement__ = 75;
        pos__ = 1;
        current_statement__ = 75;
        for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
          current_statement__ = 75;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 75;
            assign(prior_b_re_pred_scale,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_b_re_pred_scale_flat__[(pos__ - 1)],
              "assigning variable prior_b_re_pred_scale");
            current_statement__ = 75;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 76;
      n_cov_bs_use = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      if (logical_eq(n_cov, 1)) {
        current_statement__ = 79;
        n_cov_bs_use = 0;
      } else {
        current_statement__ = 77;
        n_cov_bs_use = n_cov_bs;
      }
      current_statement__ = 82;
      validate_non_negative_index("b_free", "N", N);
      current_statement__ = 83;
      validate_non_negative_index("y_impute", "n_miss", n_miss);
      current_statement__ = 84;
      validate_non_negative_index("gammas", "1", 1);
      current_statement__ = 85;
      validate_non_negative_index("b_re_pred", "n_cov_bs_use", n_cov_bs_use);
      current_statement__ = 86;
      validate_non_negative_index("bmu", "N", N);
      current_statement__ = 87;
      validate_non_negative_index("bmu", "1", 1);
      current_statement__ = 88;
      validate_non_negative_index("b", "N", N);
      current_statement__ = 89;
      validate_non_negative_index("b_re_pred_mat", "n_cov", n_cov);
      current_statement__ = 90;
      validate_non_negative_index("b_re_pred_mat", "1", 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N;
      num_params_r__ += 1;
      num_params_r__ += n_miss;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += n_cov_bs_use;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_AR_manifest_intOnly_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> b_free;
      b_free = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(b_free, DUMMY_VAR__);
      
      current_statement__ = 1;
      b_free = in__.vector(N);
      local_scalar_t__ sd_R;
      sd_R = DUMMY_VAR__;
      
      current_statement__ = 2;
      sd_R = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> y_impute;
      y_impute = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
      stan::math::fill(y_impute, DUMMY_VAR__);
      
      current_statement__ = 3;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<local_scalar_t__, 1, -1> gammas;
      gammas = Eigen::Matrix<local_scalar_t__, 1, -1>(1);
      stan::math::fill(gammas, DUMMY_VAR__);
      
      current_statement__ = 4;
      gammas = in__.row_vector(1);
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 5;
      sigma = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        sigma = stan::math::lb_constrain(sigma, 0, lp__);
      } else {
        current_statement__ = 5;
        sigma = stan::math::lb_constrain(sigma, 0);
      }
      local_scalar_t__ ar;
      ar = DUMMY_VAR__;
      
      current_statement__ = 6;
      ar = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<local_scalar_t__, -1, 1>(n_cov_bs_use);
      stan::math::fill(b_re_pred, DUMMY_VAR__);
      
      current_statement__ = 7;
      b_re_pred = in__.vector(n_cov_bs_use);
      Eigen::Matrix<local_scalar_t__, -1, -1> bmu;
      bmu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, 1);
      stan::math::fill(bmu, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(b, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> b_re_pred_mat;
      b_re_pred_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(n_cov, 1);
      stan::math::fill(b_re_pred_mat, DUMMY_VAR__);
      
      current_statement__ = 11;
      assign(b_re_pred_mat,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable b_re_pred_mat");
      current_statement__ = 19;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 14;
        for (int i = 2; i <= n_cov; ++i) {
          current_statement__ = 12;
          assign(b_re_pred_mat,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())), 0,
            "assigning variable b_re_pred_mat");}
        current_statement__ = 17;
        for (int i = 1; i <= n_cov_bs; ++i) {
          current_statement__ = 15;
          assign(b_re_pred_mat,
            cons_list(index_uni(n_cov_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(n_cov_mat[(i - 1)][(2 - 1)]),
                nil_index_list())), b_re_pred[(i - 1)],
            "assigning variable b_re_pred_mat");}
      } 
      current_statement__ = 20;
      assign(bmu, nil_index_list(), multiply(W, b_re_pred_mat),
        "assigning variable bmu");
      current_statement__ = 21;
      assign(b, nil_index_list(), b_free, "assigning variable b");
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 22;
        pos = 1;
        int obs_id;
        obs_id = std::numeric_limits<int>::min();
        
        current_statement__ = 23;
        obs_id = 1;
        current_statement__ = 24;
        validate_non_negative_index("y_merge", "N_obs", N_obs);
        Eigen::Matrix<local_scalar_t__, -1, 1> y_merge;
        y_merge = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs);
        stan::math::fill(y_merge, DUMMY_VAR__);
        
        current_statement__ = 26;
        assign(y_merge, nil_index_list(), y, "assigning variable y_merge");
        current_statement__ = 29;
        if (logical_gt(n_miss, 0)) {
          current_statement__ = 27;
          assign(y_merge, cons_list(index_multi(pos_miss), nil_index_list()),
            y_impute, "assigning variable y_merge");
        } 
        current_statement__ = 30;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_R, prior_sd_R_loc, prior_sd_R_scale));
        current_statement__ = 31;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sigma, prior_sigma_loc, prior_sigma_scale));
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(ar, 0, 2));
        current_statement__ = 33;
        lp_accum__.add(
          normal_lpdf<propto__>(gammas, prior_gamma_loc, prior_gamma_scale));
        current_statement__ = 36;
        if (logical_gt(n_cov, 1)) {
          current_statement__ = 34;
          lp_accum__.add(
            normal_lpdf<propto__>(b_re_pred,
              to_vector(
                rvalue(prior_b_re_pred_loc,
                  cons_list(index_uni(1),
                    cons_list(index_omni(), nil_index_list())),
                  "prior_b_re_pred_loc")),
              to_vector(
                rvalue(prior_b_re_pred_scale,
                  cons_list(index_uni(1),
                    cons_list(index_omni(), nil_index_list())),
                  "prior_b_re_pred_scale"))));
        } 
        current_statement__ = 37;
        lp_accum__.add(
          normal_lpdf<propto__>(b_free,
            to_vector(
              rvalue(bmu,
                cons_list(index_omni(),
                  cons_list(index_uni(1), nil_index_list())), "bmu")), sd_R));
        current_statement__ = 49;
        for (int pp = 1; pp <= N; ++pp) {
          current_statement__ = 38;
          obs_id = N_obs_id[(pp - 1)];
          {
            current_statement__ = 39;
            validate_non_negative_index("mus", "obs_id - 1", (obs_id - 1));
            Eigen::Matrix<local_scalar_t__, -1, 1> mus;
            mus = Eigen::Matrix<local_scalar_t__, -1, 1>((obs_id - 1));
            stan::math::fill(mus, DUMMY_VAR__);
            
            current_statement__ = 41;
            validate_non_negative_index("y_cen", "obs_id", obs_id);
            Eigen::Matrix<local_scalar_t__, -1, 1> y_cen;
            y_cen = Eigen::Matrix<local_scalar_t__, -1, 1>(obs_id);
            stan::math::fill(y_cen, DUMMY_VAR__);
            
            current_statement__ = 43;
            assign(y_cen, nil_index_list(),
              subtract(
                rvalue(y_merge,
                  cons_list(index_min_max(pos, ((pos + obs_id) - 1)),
                    nil_index_list()), "y_merge"), b[(pp - 1)]),
              "assigning variable y_cen");
            current_statement__ = 44;
            assign(mus, nil_index_list(),
              add(b[(pp - 1)],
                multiply(ar,
                  rvalue(y_cen,
                    cons_list(index_min_max(1, (obs_id - 1)),
                      nil_index_list()), "y_cen"))), "assigning variable mus");
            current_statement__ = 45;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(y_merge,
                  cons_list(index_min_max((pos + 1), (pos + (obs_id - 1))),
                    nil_index_list()), "y_merge"), mus, sigma));
          }
          current_statement__ = 47;
          pos = (pos + obs_id);}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_AR_manifest_intOnly_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> b_free;
      b_free = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      b_free = in__.vector(N);
      double sd_R;
      sd_R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sd_R = in__.scalar();
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(1);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      gammas = in__.row_vector(1);
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma = in__.scalar();
      current_statement__ = 5;
      sigma = stan::math::lb_constrain(sigma, 0);
      double ar;
      ar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      ar = in__.scalar();
      Eigen::Matrix<double, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<double, -1, 1>(n_cov_bs_use);
      stan::math::fill(b_re_pred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      b_re_pred = in__.vector(n_cov_bs_use);
      Eigen::Matrix<double, -1, -1> bmu;
      bmu = Eigen::Matrix<double, -1, -1>(N, 1);
      stan::math::fill(bmu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> b_re_pred_mat;
      b_re_pred_mat = Eigen::Matrix<double, -1, -1>(n_cov, 1);
      stan::math::fill(b_re_pred_mat, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(b_free[(sym1__ - 1)]);}
      vars__.emplace_back(sd_R);
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      vars__.emplace_back(sigma);
      vars__.emplace_back(ar);
      for (int sym1__ = 1; sym1__ <= n_cov_bs_use; ++sym1__) {
        vars__.emplace_back(b_re_pred[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      assign(b_re_pred_mat,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable b_re_pred_mat");
      current_statement__ = 19;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 14;
        for (int i = 2; i <= n_cov; ++i) {
          current_statement__ = 12;
          assign(b_re_pred_mat,
            cons_list(index_uni(i),
              cons_list(index_uni(1), nil_index_list())), 0,
            "assigning variable b_re_pred_mat");}
        current_statement__ = 17;
        for (int i = 1; i <= n_cov_bs; ++i) {
          current_statement__ = 15;
          assign(b_re_pred_mat,
            cons_list(index_uni(n_cov_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(n_cov_mat[(i - 1)][(2 - 1)]),
                nil_index_list())), b_re_pred[(i - 1)],
            "assigning variable b_re_pred_mat");}
      } 
      current_statement__ = 20;
      assign(bmu, nil_index_list(), multiply(W, b_re_pred_mat),
        "assigning variable bmu");
      current_statement__ = 21;
      assign(b, nil_index_list(), b_free, "assigning variable b");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(bmu,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "bmu"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(b[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            vars__.emplace_back(
              rvalue(b_re_pred_mat,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "b_re_pred_mat"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> b_free;
      b_free = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_free_flat__;
        current_statement__ = 1;
        assign(b_free_flat__, nil_index_list(), context__.vals_r("b_free"),
          "assigning variable b_free_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 1;
          assign(b_free, cons_list(index_uni(sym1__), nil_index_list()),
            b_free_flat__[(pos__ - 1)], "assigning variable b_free");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      double sd_R;
      sd_R = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sd_R = context__.vals_r("sd_R")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_impute_flat__;
        current_statement__ = 3;
        assign(y_impute_flat__, nil_index_list(),
          context__.vals_r("y_impute"), "assigning variable y_impute_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
          current_statement__ = 3;
          assign(y_impute, cons_list(index_uni(sym1__), nil_index_list()),
            y_impute_flat__[(pos__ - 1)], "assigning variable y_impute");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(1);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gammas_flat__;
        current_statement__ = 4;
        assign(gammas_flat__, nil_index_list(), context__.vals_r("gammas"),
          "assigning variable gammas_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 4;
          assign(gammas, cons_list(index_uni(sym1__), nil_index_list()),
            gammas_flat__[(pos__ - 1)], "assigning variable gammas");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma = context__.vals_r("sigma")[(1 - 1)];
      double sigma_free__;
      sigma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      sigma_free__ = stan::math::lb_free(sigma, 0);
      double ar;
      ar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      ar = context__.vals_r("ar")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<double, -1, 1>(n_cov_bs_use);
      stan::math::fill(b_re_pred, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_re_pred_flat__;
        current_statement__ = 7;
        assign(b_re_pred_flat__, nil_index_list(),
          context__.vals_r("b_re_pred"),
          "assigning variable b_re_pred_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_cov_bs_use; ++sym1__) {
          current_statement__ = 7;
          assign(b_re_pred, cons_list(index_uni(sym1__), nil_index_list()),
            b_re_pred_flat__[(pos__ - 1)], "assigning variable b_re_pred");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(b_free[(sym1__ - 1)]);}
      vars__.emplace_back(sd_R);
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      vars__.emplace_back(sigma_free__);
      vars__.emplace_back(ar);
      for (int sym1__ = 1; sym1__ <= n_cov_bs_use; ++sym1__) {
        vars__.emplace_back(b_re_pred[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b_free");
    names__.emplace_back("sd_R");
    names__.emplace_back("y_impute");
    names__.emplace_back("gammas");
    names__.emplace_back("sigma");
    names__.emplace_back("ar");
    names__.emplace_back("b_re_pred");
    names__.emplace_back("bmu");
    names__.emplace_back("b");
    names__.emplace_back("b_re_pred_mat");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_miss)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_cov_bs_use)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_cov),
                                             static_cast<size_t>(1)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_R");
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "ar");
    for (int sym1__ = 1; sym1__ <= n_cov_bs_use; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_re_pred" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_re_pred_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_R");
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "ar");
    for (int sym1__ = 1; sym1__ <= n_cov_bs_use; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_re_pred" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_re_pred_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << 1 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_re_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_cov_bs_use << "},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"b_re_pred_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << 1 << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b_re_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_cov_bs_use << "},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"b_re_pred_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << 1 << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_AR_manifest_intOnly_namespace::model_AR_manifest_intOnly;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_AR_manifest_intOnly_namespace::profiles__;
}
#endif
#endif
