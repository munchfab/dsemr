// Generated by rstantools.  Do not edit by hand.

/*
    dsemr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    dsemr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with dsemr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_AR_manifest_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 45, column 2 to column 29)",
                                                      " (in 'string', line 46, column 2 to column 33)",
                                                      " (in 'string', line 47, column 2 to column 38)",
                                                      " (in 'string', line 48, column 2 to column 35)",
                                                      " (in 'string', line 49, column 2 to column 26)",
                                                      " (in 'string', line 50, column 2 to column 30)",
                                                      " (in 'string', line 51, column 2 to column 29)",
                                                      " (in 'string', line 52, column 2 to column 26)",
                                                      " (in 'string', line 53, column 2 to column 35)",
                                                      " (in 'string', line 54, column 2 to column 34)",
                                                      " (in 'string', line 57, column 2 to column 26)",
                                                      " (in 'string', line 58, column 2 to column 21)",
                                                      " (in 'string', line 59, column 2 to column 32)",
                                                      " (in 'string', line 60, column 2 to column 73)",
                                                      " (in 'string', line 62, column 2 to column 29)",
                                                      " (in 'string', line 65, column 5 to column 65)",
                                                      " (in 'string', line 64, column 25 to line 66, column 5)",
                                                      " (in 'string', line 64, column 5 to line 66, column 5)",
                                                      " (in 'string', line 63, column 13 to line 67, column 3)",
                                                      " (in 'string', line 63, column 2 to line 67, column 3)",
                                                      " (in 'string', line 69, column 2 to column 26)",
                                                      " (in 'string', line 72, column 4 to column 45)",
                                                      " (in 'string', line 71, column 22 to line 73, column 3)",
                                                      " (in 'string', line 71, column 2 to line 73, column 3)",
                                                      " (in 'string', line 78, column 6 to column 43)",
                                                      " (in 'string', line 77, column 11 to line 79, column 5)",
                                                      " (in 'string', line 76, column 6 to column 40)",
                                                      " (in 'string', line 75, column 21 to line 77, column 5)",
                                                      " (in 'string', line 75, column 2 to line 79, column 5)",
                                                      " (in 'string', line 137, column 2 to column 34)",
                                                      " (in 'string', line 140, column 2 to column 47)",
                                                      " (in 'string', line 82, column 2 to column 14)",
                                                      " (in 'string', line 83, column 2 to column 17)",
                                                      " (in 'string', line 84, column 9 to column 17)",
                                                      " (in 'string', line 84, column 19 to column 27)",
                                                      " (in 'string', line 84, column 2 to column 64)",
                                                      " (in 'string', line 85, column 9 to column 14)",
                                                      " (in 'string', line 85, column 2 to column 24)",
                                                      " (in 'string', line 86, column 2 to column 14)",
                                                      " (in 'string', line 89, column 4 to column 33)",
                                                      " (in 'string', line 88, column 14 to line 90, column 3)",
                                                      " (in 'string', line 88, column 2 to line 90, column 3)",
                                                      " (in 'string', line 92, column 2 to column 51)",
                                                      " (in 'string', line 93, column 2 to column 48)",
                                                      " (in 'string', line 94, column 2 to column 35)",
                                                      " (in 'string', line 96, column 4 to column 55)",
                                                      " (in 'string', line 95, column 21 to line 97, column 3)",
                                                      " (in 'string', line 95, column 2 to line 97, column 3)",
                                                      " (in 'string', line 99, column 4 to column 65)",
                                                      " (in 'string', line 98, column 15 to line 100, column 3)",
                                                      " (in 'string', line 98, column 2 to line 100, column 3)",
                                                      " (in 'string', line 102, column 4 to column 65)",
                                                      " (in 'string', line 103, column 4 to column 58)",
                                                      " (in 'string', line 104, column 4 to column 65)",
                                                      " (in 'string', line 101, column 15 to line 105, column 3)",
                                                      " (in 'string', line 101, column 2 to line 105, column 3)",
                                                      " (in 'string', line 108, column 4 to column 26)",
                                                      " (in 'string', line 110, column 4 to column 80)",
                                                      " (in 'string', line 113, column 11 to column 19)",
                                                      " (in 'string', line 113, column 4 to column 25)",
                                                      " (in 'string', line 115, column 11 to column 17)",
                                                      " (in 'string', line 115, column 4 to column 25)",
                                                      " (in 'string', line 116, column 4 to column 50)",
                                                      " (in 'string', line 118, column 4 to column 51)",
                                                      " (in 'string', line 120, column 4 to column 66)",
                                                      " (in 'string', line 112, column 4 to line 121, column 5)",
                                                      " (in 'string', line 123, column 4 to column 23)",
                                                      " (in 'string', line 106, column 18 to line 124, column 3)",
                                                      " (in 'string', line 106, column 2 to line 124, column 3)",
                                                      " (in 'string', line 127, column 4 to column 14)",
                                                      " (in 'string', line 128, column 11 to column 12)",
                                                      " (in 'string', line 128, column 13 to column 25)",
                                                      " (in 'string', line 128, column 4 to column 49)",
                                                      " (in 'string', line 130, column 6 to column 31)",
                                                      " (in 'string', line 131, column 6 to column 110)",
                                                      " (in 'string', line 132, column 6 to column 19)",
                                                      " (in 'string', line 129, column 21 to line 133, column 5)",
                                                      " (in 'string', line 129, column 4 to line 133, column 5)",
                                                      " (in 'string', line 126, column 15 to line 134, column 3)",
                                                      " (in 'string', line 126, column 2 to line 134, column 3)",
                                                      " (in 'string', line 3, column 2 to column 17)",
                                                      " (in 'string', line 4, column 2 to column 21)",
                                                      " (in 'string', line 5, column 2 to column 22)",
                                                      " (in 'string', line 6, column 2 to column 24)",
                                                      " (in 'string', line 7, column 2 to column 14)",
                                                      " (in 'string', line 8, column 17 to column 24)",
                                                      " (in 'string', line 8, column 2 to column 26)",
                                                      " (in 'string', line 9, column 16 to column 24)",
                                                      " (in 'string', line 9, column 2 to column 26)",
                                                      " (in 'string', line 10, column 24 to column 25)",
                                                      " (in 'string', line 10, column 2 to column 27)",
                                                      " (in 'string', line 11, column 9 to column 14)",
                                                      " (in 'string', line 11, column 2 to column 18)",
                                                      " (in 'string', line 13, column 2 to column 13)",
                                                      " (in 'string', line 14, column 15 to column 21)",
                                                      " (in 'string', line 14, column 2 to column 23)",
                                                      " (in 'string', line 18, column 2 to column 34)",
                                                      " (in 'string', line 21, column 2 to column 21)",
                                                      " (in 'string', line 22, column 2 to column 15)",
                                                      " (in 'string', line 23, column 16 to column 24)",
                                                      " (in 'string', line 23, column 2 to column 29)",
                                                      " (in 'string', line 24, column 9 to column 10)",
                                                      " (in 'string', line 24, column 12 to column 17)",
                                                      " (in 'string', line 24, column 2 to column 21)",
                                                      " (in 'string', line 26, column 2 to column 12)",
                                                      " (in 'string', line 27, column 15 to column 20)",
                                                      " (in 'string', line 27, column 2 to column 24)",
                                                      " (in 'string', line 28, column 2 to column 19)",
                                                      " (in 'string', line 29, column 2 to column 19)",
                                                      " (in 'string', line 30, column 18 to column 23)",
                                                      " (in 'string', line 30, column 24 to column 36)",
                                                      " (in 'string', line 30, column 2 to column 38)",
                                                      " (in 'string', line 31, column 2 to column 10)",
                                                      " (in 'string', line 32, column 9 to column 10)",
                                                      " (in 'string', line 32, column 12 to column 15)",
                                                      " (in 'string', line 32, column 2 to column 19)",
                                                      " (in 'string', line 33, column 16 to column 21)",
                                                      " (in 'string', line 33, column 9 to column 10)",
                                                      " (in 'string', line 33, column 2 to column 23)",
                                                      " (in 'string', line 35, column 9 to column 17)",
                                                      " (in 'string', line 35, column 2 to column 33)",
                                                      " (in 'string', line 36, column 9 to column 17)",
                                                      " (in 'string', line 36, column 2 to column 32)",
                                                      " (in 'string', line 37, column 2 to column 17)",
                                                      " (in 'string', line 38, column 9 to column 21)",
                                                      " (in 'string', line 38, column 2 to column 37)",
                                                      " (in 'string', line 39, column 9 to column 17)",
                                                      " (in 'string', line 39, column 2 to column 37)",
                                                      " (in 'string', line 40, column 9 to column 14)",
                                                      " (in 'string', line 40, column 2 to column 34)",
                                                      " (in 'string', line 41, column 9 to column 21)",
                                                      " (in 'string', line 41, column 2 to column 37)",
                                                      " (in 'string', line 42, column 9 to column 14)",
                                                      " (in 'string', line 42, column 2 to column 34)",
                                                      " (in 'string', line 45, column 26 to column 27)",
                                                      " (in 'string', line 45, column 9 to column 17)",
                                                      " (in 'string', line 46, column 18 to column 26)",
                                                      " (in 'string', line 47, column 18 to column 30)",
                                                      " (in 'string', line 48, column 23 to column 31)",
                                                      " (in 'string', line 49, column 9 to column 15)",
                                                      " (in 'string', line 50, column 13 to column 21)",
                                                      " (in 'string', line 51, column 9 to column 17)",
                                                      " (in 'string', line 52, column 9 to column 14)",
                                                      " (in 'string', line 53, column 18 to column 23)",
                                                      " (in 'string', line 54, column 9 to column 21)",
                                                      " (in 'string', line 57, column 9 to column 10)",
                                                      " (in 'string', line 57, column 12 to column 20)",
                                                      " (in 'string', line 58, column 9 to column 10)",
                                                      " (in 'string', line 58, column 11 to column 17)",
                                                      " (in 'string', line 59, column 20 to column 21)",
                                                      " (in 'string', line 60, column 9 to column 14)",
                                                      " (in 'string', line 60, column 16 to column 24)",
                                                      " (in 'string', line 137, column 9 to column 17)",
                                                      " (in 'string', line 137, column 18 to column 26)"};
#include <stan_meta_header.hpp>
class model_AR_manifest final : public model_base_crtp<model_AR_manifest> {
private:
  int N;
  int N_obs;
  int n_pars;
  int n_random;
  int n_fixed;
  std::vector<std::vector<int>> is_fixed;
  std::vector<int> is_random;
  std::vector<int> N_obs_id;
  Eigen::Matrix<double, -1, 1> y;
  int n_miss;
  std::vector<int> pos_miss;
  int innos_rand;
  int n_cov;
  int n_cov_bs;
  std::vector<std::vector<int>> n_cov_mat;
  Eigen::Matrix<double, -1, -1> W;
  int n_out;
  std::vector<std::vector<int>> n_out_bs;
  int n_out_bs_max;
  int n_out_bs_sum;
  std::vector<std::vector<int>> n_out_b_pos;
  int n_z;
  Eigen::Matrix<double, -1, -1> Z;
  std::vector<Eigen::Matrix<double, -1, 1>> out;
  Eigen::Matrix<double, -1, -1> prior_gamma;
  Eigen::Matrix<double, -1, -1> prior_sd_R;
  double prior_LKJ;
  Eigen::Matrix<double, -1, -1> prior_sigma;
  Eigen::Matrix<double, -1, -1> prior_b_re_pred;
  Eigen::Matrix<double, -1, -1> prior_alpha_out;
  Eigen::Matrix<double, -1, -1> prior_b_out;
  Eigen::Matrix<double, -1, -1> prior_sigma_out;
  int sigma_1dim__;
 
public:
  ~model_AR_manifest() { }
  
  inline std::string model_name() const final { return "model_AR_manifest"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_AR_manifest(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_AR_manifest_namespace::model_AR_manifest";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 81;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 81;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 81;
      current_statement__ = 81;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 82;
      context__.validate_dims("data initialization","N_obs","int",
          context__.to_vec());
      N_obs = std::numeric_limits<int>::min();
      
      current_statement__ = 82;
      N_obs = context__.vals_i("N_obs")[(1 - 1)];
      current_statement__ = 82;
      current_statement__ = 82;
      check_greater_or_equal(function__, "N_obs", N_obs, 1);
      current_statement__ = 83;
      context__.validate_dims("data initialization","n_pars","int",
          context__.to_vec());
      n_pars = std::numeric_limits<int>::min();
      
      current_statement__ = 83;
      n_pars = context__.vals_i("n_pars")[(1 - 1)];
      current_statement__ = 83;
      current_statement__ = 83;
      check_greater_or_equal(function__, "n_pars", n_pars, 1);
      current_statement__ = 84;
      context__.validate_dims("data initialization","n_random","int",
          context__.to_vec());
      n_random = std::numeric_limits<int>::min();
      
      current_statement__ = 84;
      n_random = context__.vals_i("n_random")[(1 - 1)];
      current_statement__ = 84;
      current_statement__ = 84;
      check_greater_or_equal(function__, "n_random", n_random, 2);
      current_statement__ = 85;
      context__.validate_dims("data initialization","n_fixed","int",
          context__.to_vec());
      n_fixed = std::numeric_limits<int>::min();
      
      current_statement__ = 85;
      n_fixed = context__.vals_i("n_fixed")[(1 - 1)];
      current_statement__ = 86;
      validate_non_negative_index("is_fixed", "n_fixed", n_fixed);
      current_statement__ = 87;
      context__.validate_dims("data initialization","is_fixed","int",
          context__.to_vec(1, n_fixed));
      is_fixed = std::vector<std::vector<int>>(1, std::vector<int>(n_fixed, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> is_fixed_flat__;
        current_statement__ = 87;
        assign(is_fixed_flat__, nil_index_list(),
          context__.vals_i("is_fixed"), "assigning variable is_fixed_flat__");
        current_statement__ = 87;
        pos__ = 1;
        current_statement__ = 87;
        for (int sym1__ = 1; sym1__ <= n_fixed; ++sym1__) {
          current_statement__ = 87;
          for (int sym2__ = 1; sym2__ <= 1; ++sym2__) {
            current_statement__ = 87;
            assign(is_fixed,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              is_fixed_flat__[(pos__ - 1)], "assigning variable is_fixed");
            current_statement__ = 87;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 88;
      validate_non_negative_index("is_random", "n_random", n_random);
      current_statement__ = 89;
      context__.validate_dims("data initialization","is_random","int",
          context__.to_vec(n_random));
      is_random = std::vector<int>(n_random, std::numeric_limits<int>::min());
      
      current_statement__ = 89;
      assign(is_random, nil_index_list(), context__.vals_i("is_random"),
        "assigning variable is_random");
      current_statement__ = 90;
      validate_non_negative_index("N_obs_id", "N", N);
      current_statement__ = 91;
      context__.validate_dims("data initialization","N_obs_id","int",
          context__.to_vec(N));
      N_obs_id = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 91;
      assign(N_obs_id, nil_index_list(), context__.vals_i("N_obs_id"),
        "assigning variable N_obs_id");
      current_statement__ = 91;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 91;
        current_statement__ = 91;
        check_greater_or_equal(function__, "N_obs_id[sym1__]",
                               N_obs_id[(sym1__ - 1)], 1);}
      current_statement__ = 92;
      validate_non_negative_index("y", "N_obs", N_obs);
      current_statement__ = 93;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N_obs));
      y = Eigen::Matrix<double, -1, 1>(N_obs);
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 93;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 93;
        pos__ = 1;
        current_statement__ = 93;
        for (int sym1__ = 1; sym1__ <= N_obs; ++sym1__) {
          current_statement__ = 93;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 93;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 94;
      context__.validate_dims("data initialization","n_miss","int",
          context__.to_vec());
      n_miss = std::numeric_limits<int>::min();
      
      current_statement__ = 94;
      n_miss = context__.vals_i("n_miss")[(1 - 1)];
      current_statement__ = 95;
      validate_non_negative_index("pos_miss", "n_miss", n_miss);
      current_statement__ = 96;
      context__.validate_dims("data initialization","pos_miss","int",
          context__.to_vec(n_miss));
      pos_miss = std::vector<int>(n_miss, std::numeric_limits<int>::min());
      
      current_statement__ = 96;
      assign(pos_miss, nil_index_list(), context__.vals_i("pos_miss"),
        "assigning variable pos_miss");
      current_statement__ = 97;
      context__.validate_dims("data initialization","innos_rand","int",
          context__.to_vec());
      innos_rand = std::numeric_limits<int>::min();
      
      current_statement__ = 97;
      innos_rand = context__.vals_i("innos_rand")[(1 - 1)];
      current_statement__ = 97;
      current_statement__ = 97;
      check_greater_or_equal(function__, "innos_rand", innos_rand, 0);
      current_statement__ = 97;
      current_statement__ = 97;
      check_less_or_equal(function__, "innos_rand", innos_rand, 1);
      current_statement__ = 98;
      context__.validate_dims("data initialization","n_cov","int",
          context__.to_vec());
      n_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      n_cov = context__.vals_i("n_cov")[(1 - 1)];
      current_statement__ = 98;
      current_statement__ = 98;
      check_greater_or_equal(function__, "n_cov", n_cov, 1);
      current_statement__ = 99;
      context__.validate_dims("data initialization","n_cov_bs","int",
          context__.to_vec());
      n_cov_bs = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      n_cov_bs = context__.vals_i("n_cov_bs")[(1 - 1)];
      current_statement__ = 100;
      validate_non_negative_index("n_cov_mat", "n_cov_bs", n_cov_bs);
      current_statement__ = 101;
      context__.validate_dims("data initialization","n_cov_mat","int",
          context__.to_vec(n_cov_bs, 2));
      n_cov_mat = std::vector<std::vector<int>>(n_cov_bs, std::vector<int>(2, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> n_cov_mat_flat__;
        current_statement__ = 101;
        assign(n_cov_mat_flat__, nil_index_list(),
          context__.vals_i("n_cov_mat"),
          "assigning variable n_cov_mat_flat__");
        current_statement__ = 101;
        pos__ = 1;
        current_statement__ = 101;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 101;
          for (int sym2__ = 1; sym2__ <= n_cov_bs; ++sym2__) {
            current_statement__ = 101;
            assign(n_cov_mat,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_cov_mat_flat__[(pos__ - 1)], "assigning variable n_cov_mat");
            current_statement__ = 101;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 102;
      validate_non_negative_index("W", "N", N);
      current_statement__ = 103;
      validate_non_negative_index("W", "n_cov", n_cov);
      current_statement__ = 104;
      context__.validate_dims("data initialization","W","double",
          context__.to_vec(N, n_cov));
      W = Eigen::Matrix<double, -1, -1>(N, n_cov);
      stan::math::fill(W, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 104;
        assign(W_flat__, nil_index_list(), context__.vals_r("W"),
          "assigning variable W_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= n_cov; ++sym1__) {
          current_statement__ = 104;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 104;
            assign(W,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              W_flat__[(pos__ - 1)], "assigning variable W");
            current_statement__ = 104;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 105;
      context__.validate_dims("data initialization","n_out","int",
          context__.to_vec());
      n_out = std::numeric_limits<int>::min();
      
      current_statement__ = 105;
      n_out = context__.vals_i("n_out")[(1 - 1)];
      current_statement__ = 106;
      validate_non_negative_index("n_out_bs", "n_out", n_out);
      current_statement__ = 107;
      context__.validate_dims("data initialization","n_out_bs","int",
          context__.to_vec(n_out, 1));
      n_out_bs = std::vector<std::vector<int>>(n_out, std::vector<int>(1, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> n_out_bs_flat__;
        current_statement__ = 107;
        assign(n_out_bs_flat__, nil_index_list(),
          context__.vals_i("n_out_bs"), "assigning variable n_out_bs_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= 1; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 107;
            assign(n_out_bs,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_out_bs_flat__[(pos__ - 1)], "assigning variable n_out_bs");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      context__.validate_dims("data initialization","n_out_bs_max","int",
          context__.to_vec());
      n_out_bs_max = std::numeric_limits<int>::min();
      
      current_statement__ = 108;
      n_out_bs_max = context__.vals_i("n_out_bs_max")[(1 - 1)];
      current_statement__ = 109;
      context__.validate_dims("data initialization","n_out_bs_sum","int",
          context__.to_vec());
      n_out_bs_sum = std::numeric_limits<int>::min();
      
      current_statement__ = 109;
      n_out_bs_sum = context__.vals_i("n_out_bs_sum")[(1 - 1)];
      current_statement__ = 110;
      validate_non_negative_index("n_out_b_pos", "n_out", n_out);
      current_statement__ = 111;
      validate_non_negative_index("n_out_b_pos", "n_out_bs_max", n_out_bs_max);
      current_statement__ = 112;
      context__.validate_dims("data initialization","n_out_b_pos","int",
          context__.to_vec(n_out, n_out_bs_max));
      n_out_b_pos = std::vector<std::vector<int>>(n_out, std::vector<int>(n_out_bs_max, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> n_out_b_pos_flat__;
        current_statement__ = 112;
        assign(n_out_b_pos_flat__, nil_index_list(),
          context__.vals_i("n_out_b_pos"),
          "assigning variable n_out_b_pos_flat__");
        current_statement__ = 112;
        pos__ = 1;
        current_statement__ = 112;
        for (int sym1__ = 1; sym1__ <= n_out_bs_max; ++sym1__) {
          current_statement__ = 112;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 112;
            assign(n_out_b_pos,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_out_b_pos_flat__[(pos__ - 1)],
              "assigning variable n_out_b_pos");
            current_statement__ = 112;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 113;
      context__.validate_dims("data initialization","n_z","int",
          context__.to_vec());
      n_z = std::numeric_limits<int>::min();
      
      current_statement__ = 113;
      n_z = context__.vals_i("n_z")[(1 - 1)];
      current_statement__ = 114;
      validate_non_negative_index("Z", "N", N);
      current_statement__ = 115;
      validate_non_negative_index("Z", "n_z", n_z);
      current_statement__ = 116;
      context__.validate_dims("data initialization","Z","double",
          context__.to_vec(N, n_z));
      Z = Eigen::Matrix<double, -1, -1>(N, n_z);
      stan::math::fill(Z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> Z_flat__;
        current_statement__ = 116;
        assign(Z_flat__, nil_index_list(), context__.vals_r("Z"),
          "assigning variable Z_flat__");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= n_z; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 116;
            assign(Z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Z_flat__[(pos__ - 1)], "assigning variable Z");
            current_statement__ = 116;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 117;
      validate_non_negative_index("out", "n_out", n_out);
      current_statement__ = 118;
      validate_non_negative_index("out", "N", N);
      current_statement__ = 119;
      context__.validate_dims("data initialization","out","double",
          context__.to_vec(n_out, N));
      out = std::vector<Eigen::Matrix<double, -1, 1>>(n_out, Eigen::Matrix<double, -1, 1>(N));
      stan::math::fill(out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> out_flat__;
        current_statement__ = 119;
        assign(out_flat__, nil_index_list(), context__.vals_r("out"),
          "assigning variable out_flat__");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 119;
            assign(out,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              out_flat__[(pos__ - 1)], "assigning variable out");
            current_statement__ = 119;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 120;
      validate_non_negative_index("prior_gamma", "n_random", n_random);
      current_statement__ = 121;
      context__.validate_dims("data initialization","prior_gamma","double",
          context__.to_vec(n_random, 2));
      prior_gamma = Eigen::Matrix<double, -1, -1>(n_random, 2);
      stan::math::fill(prior_gamma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_gamma_flat__;
        current_statement__ = 121;
        assign(prior_gamma_flat__, nil_index_list(),
          context__.vals_r("prior_gamma"),
          "assigning variable prior_gamma_flat__");
        current_statement__ = 121;
        pos__ = 1;
        current_statement__ = 121;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 121;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 121;
            assign(prior_gamma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_gamma_flat__[(pos__ - 1)],
              "assigning variable prior_gamma");
            current_statement__ = 121;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 122;
      validate_non_negative_index("prior_sd_R", "n_random", n_random);
      current_statement__ = 123;
      context__.validate_dims("data initialization","prior_sd_R","double",
          context__.to_vec(n_random, 2));
      prior_sd_R = Eigen::Matrix<double, -1, -1>(n_random, 2);
      stan::math::fill(prior_sd_R, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sd_R_flat__;
        current_statement__ = 123;
        assign(prior_sd_R_flat__, nil_index_list(),
          context__.vals_r("prior_sd_R"),
          "assigning variable prior_sd_R_flat__");
        current_statement__ = 123;
        pos__ = 1;
        current_statement__ = 123;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 123;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 123;
            assign(prior_sd_R,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sd_R_flat__[(pos__ - 1)], "assigning variable prior_sd_R");
            current_statement__ = 123;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 124;
      context__.validate_dims("data initialization","prior_LKJ","double",
          context__.to_vec());
      prior_LKJ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 124;
      prior_LKJ = context__.vals_r("prior_LKJ")[(1 - 1)];
      current_statement__ = 125;
      validate_non_negative_index("prior_sigma", "1 - innos_rand",
                                  (1 - innos_rand));
      current_statement__ = 126;
      context__.validate_dims("data initialization","prior_sigma","double",
          context__.to_vec((1 - innos_rand), 2));
      prior_sigma = Eigen::Matrix<double, -1, -1>((1 - innos_rand), 2);
      stan::math::fill(prior_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sigma_flat__;
        current_statement__ = 126;
        assign(prior_sigma_flat__, nil_index_list(),
          context__.vals_r("prior_sigma"),
          "assigning variable prior_sigma_flat__");
        current_statement__ = 126;
        pos__ = 1;
        current_statement__ = 126;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 126;
          for (int sym2__ = 1; sym2__ <= (1 - innos_rand); ++sym2__) {
            current_statement__ = 126;
            assign(prior_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sigma_flat__[(pos__ - 1)],
              "assigning variable prior_sigma");
            current_statement__ = 126;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 127;
      validate_non_negative_index("prior_b_re_pred", "n_cov_bs", n_cov_bs);
      current_statement__ = 128;
      context__.validate_dims("data initialization","prior_b_re_pred",
          "double",context__.to_vec(n_cov_bs, 2));
      prior_b_re_pred = Eigen::Matrix<double, -1, -1>(n_cov_bs, 2);
      stan::math::fill(prior_b_re_pred, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_b_re_pred_flat__;
        current_statement__ = 128;
        assign(prior_b_re_pred_flat__, nil_index_list(),
          context__.vals_r("prior_b_re_pred"),
          "assigning variable prior_b_re_pred_flat__");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= n_cov_bs; ++sym2__) {
            current_statement__ = 128;
            assign(prior_b_re_pred,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_b_re_pred_flat__[(pos__ - 1)],
              "assigning variable prior_b_re_pred");
            current_statement__ = 128;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 129;
      validate_non_negative_index("prior_alpha_out", "n_out", n_out);
      current_statement__ = 130;
      context__.validate_dims("data initialization","prior_alpha_out",
          "double",context__.to_vec(n_out, 2));
      prior_alpha_out = Eigen::Matrix<double, -1, -1>(n_out, 2);
      stan::math::fill(prior_alpha_out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_alpha_out_flat__;
        current_statement__ = 130;
        assign(prior_alpha_out_flat__, nil_index_list(),
          context__.vals_r("prior_alpha_out"),
          "assigning variable prior_alpha_out_flat__");
        current_statement__ = 130;
        pos__ = 1;
        current_statement__ = 130;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 130;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 130;
            assign(prior_alpha_out,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_alpha_out_flat__[(pos__ - 1)],
              "assigning variable prior_alpha_out");
            current_statement__ = 130;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 131;
      validate_non_negative_index("prior_b_out", "n_out_bs_sum", n_out_bs_sum);
      current_statement__ = 132;
      context__.validate_dims("data initialization","prior_b_out","double",
          context__.to_vec(n_out_bs_sum, 2));
      prior_b_out = Eigen::Matrix<double, -1, -1>(n_out_bs_sum, 2);
      stan::math::fill(prior_b_out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_b_out_flat__;
        current_statement__ = 132;
        assign(prior_b_out_flat__, nil_index_list(),
          context__.vals_r("prior_b_out"),
          "assigning variable prior_b_out_flat__");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= n_out_bs_sum; ++sym2__) {
            current_statement__ = 132;
            assign(prior_b_out,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_b_out_flat__[(pos__ - 1)],
              "assigning variable prior_b_out");
            current_statement__ = 132;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 133;
      validate_non_negative_index("prior_sigma_out", "n_out", n_out);
      current_statement__ = 134;
      context__.validate_dims("data initialization","prior_sigma_out",
          "double",context__.to_vec(n_out, 2));
      prior_sigma_out = Eigen::Matrix<double, -1, -1>(n_out, 2);
      stan::math::fill(prior_sigma_out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> prior_sigma_out_flat__;
        current_statement__ = 134;
        assign(prior_sigma_out_flat__, nil_index_list(),
          context__.vals_r("prior_sigma_out"),
          "assigning variable prior_sigma_out_flat__");
        current_statement__ = 134;
        pos__ = 1;
        current_statement__ = 134;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 134;
          for (int sym2__ = 1; sym2__ <= n_out; ++sym2__) {
            current_statement__ = 134;
            assign(prior_sigma_out,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              prior_sigma_out_flat__[(pos__ - 1)],
              "assigning variable prior_sigma_out");
            current_statement__ = 134;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 135;
      validate_non_negative_index("b_free", "N", N);
      current_statement__ = 136;
      validate_non_negative_index("b_free", "n_random", n_random);
      current_statement__ = 137;
      validate_non_negative_index("sd_R", "n_random", n_random);
      current_statement__ = 138;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 138;
      sigma_1dim__ = (1 - innos_rand);
      current_statement__ = 138;
      validate_non_negative_index("sigma", "1 - innos_rand", sigma_1dim__);
      current_statement__ = 139;
      validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 139;
      validate_non_negative_index("L", "n_random", n_random);
      current_statement__ = 140;
      validate_non_negative_index("y_impute", "n_miss", n_miss);
      current_statement__ = 141;
      validate_non_negative_index("gammas", "n_random", n_random);
      current_statement__ = 142;
      validate_non_negative_index("b_re_pred", "n_cov_bs", n_cov_bs);
      current_statement__ = 143;
      validate_non_negative_index("alpha_out", "n_out", n_out);
      current_statement__ = 144;
      validate_non_negative_index("sigma_out", "n_out", n_out);
      current_statement__ = 145;
      validate_non_negative_index("b_out_pred", "n_out_bs_sum", n_out_bs_sum);
      current_statement__ = 146;
      validate_non_negative_index("bmu", "N", N);
      current_statement__ = 147;
      validate_non_negative_index("bmu", "n_random", n_random);
      current_statement__ = 148;
      validate_non_negative_index("b", "N", N);
      current_statement__ = 149;
      validate_non_negative_index("b", "n_pars", n_pars);
      current_statement__ = 150;
      validate_non_negative_index("sd_noise", "N", N);
      current_statement__ = 151;
      validate_non_negative_index("b_re_pred_mat", "n_cov", n_cov);
      current_statement__ = 152;
      validate_non_negative_index("b_re_pred_mat", "n_random", n_random);
      current_statement__ = 153;
      validate_non_negative_index("bcorr", "n_random", n_random);
      current_statement__ = 154;
      validate_non_negative_index("bcorr", "n_random", n_random);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N * n_random;
      num_params_r__ += n_random;
      num_params_r__ += sigma_1dim__;
      num_params_r__ += ((n_random * (n_random - 1)) / 2);
      num_params_r__ += n_miss;
      num_params_r__ += n_random;
      num_params_r__ += n_cov_bs;
      num_params_r__ += n_out;
      num_params_r__ += n_out;
      num_params_r__ += n_out_bs_sum;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_AR_manifest_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(N, Eigen::Matrix<local_scalar_t__, -1, 1>(n_random));
      stan::math::fill(b_free, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(b_free, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_random), "assigning variable b_free");}
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_R;
      sd_R = Eigen::Matrix<local_scalar_t__, -1, 1>(n_random);
      stan::math::fill(sd_R, DUMMY_VAR__);
      
      current_statement__ = 2;
      sd_R = in__.vector(n_random);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0, lp__),
            "assigning variable sd_R");
        } else {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0),
            "assigning variable sd_R");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 3;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(n_random, n_random);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_random *
                                                         (n_random - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((n_random * (n_random - 1)) / 2));
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, n_random, lp__),
          "assigning variable L");
      } else {
        current_statement__ = 4;
        assign(L, nil_index_list(),
          stan::math::cholesky_corr_constrain(L_in__, n_random),
          "assigning variable L");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> y_impute;
      y_impute = Eigen::Matrix<local_scalar_t__, -1, 1>(n_miss);
      stan::math::fill(y_impute, DUMMY_VAR__);
      
      current_statement__ = 5;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<local_scalar_t__, 1, -1> gammas;
      gammas = Eigen::Matrix<local_scalar_t__, 1, -1>(n_random);
      stan::math::fill(gammas, DUMMY_VAR__);
      
      current_statement__ = 6;
      gammas = in__.row_vector(n_random);
      Eigen::Matrix<local_scalar_t__, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<local_scalar_t__, -1, 1>(n_cov_bs);
      stan::math::fill(b_re_pred, DUMMY_VAR__);
      
      current_statement__ = 7;
      b_re_pred = in__.vector(n_cov_bs);
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_out;
      alpha_out = Eigen::Matrix<local_scalar_t__, -1, 1>(n_out);
      stan::math::fill(alpha_out, DUMMY_VAR__);
      
      current_statement__ = 8;
      alpha_out = in__.vector(n_out);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma_out;
      sigma_out = Eigen::Matrix<local_scalar_t__, -1, 1>(n_out);
      stan::math::fill(sigma_out, DUMMY_VAR__);
      
      current_statement__ = 9;
      sigma_out = in__.vector(n_out);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        current_statement__ = 9;
        if (jacobian__) {
          current_statement__ = 9;
          assign(sigma_out, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_out[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma_out");
        } else {
          current_statement__ = 9;
          assign(sigma_out, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_out[(sym1__ - 1)], 0),
            "assigning variable sigma_out");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> b_out_pred;
      b_out_pred = Eigen::Matrix<local_scalar_t__, -1, 1>(n_out_bs_sum);
      stan::math::fill(b_out_pred, DUMMY_VAR__);
      
      current_statement__ = 10;
      b_out_pred = in__.vector(n_out_bs_sum);
      Eigen::Matrix<local_scalar_t__, -1, -1> bmu;
      bmu = Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_random);
      stan::math::fill(bmu, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, -1>(N, n_pars);
      stan::math::fill(b, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> sd_noise;
      sd_noise = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(sd_noise, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> b_re_pred_mat;
      b_re_pred_mat = Eigen::Matrix<local_scalar_t__, -1, -1>(n_cov, n_random);
      stan::math::fill(b_re_pred_mat, DUMMY_VAR__);
      
      current_statement__ = 14;
      assign(b_re_pred_mat, nil_index_list(), rep_matrix(0, n_cov, n_random),
        "assigning variable b_re_pred_mat");
      current_statement__ = 15;
      assign(b_re_pred_mat,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable b_re_pred_mat");
      current_statement__ = 20;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 18;
        for (int i = 1; i <= n_cov_bs; ++i) {
          current_statement__ = 16;
          assign(b_re_pred_mat,
            cons_list(index_uni(n_cov_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(n_cov_mat[(i - 1)][(2 - 1)]),
                nil_index_list())), b_re_pred[(i - 1)],
            "assigning variable b_re_pred_mat");}
      } 
      current_statement__ = 21;
      assign(bmu, nil_index_list(), multiply(W, b_re_pred_mat),
        "assigning variable bmu");
      current_statement__ = 24;
      for (int i = 1; i <= n_random; ++i) {
        current_statement__ = 22;
        assign(b,
          cons_list(index_omni(),
            cons_list(index_uni(is_random[(i - 1)]), nil_index_list())),
          to_vector(
            rvalue(b_free,
              cons_list(index_omni(),
                cons_list(index_uni(i), nil_index_list())), "b_free")),
          "assigning variable b");}
      current_statement__ = 29;
      if (logical_eq(innos_rand, 0)) {
        current_statement__ = 27;
        assign(sd_noise, nil_index_list(), rep_vector(sigma[(1 - 1)], N),
          "assigning variable sd_noise");
      } else {
        current_statement__ = 25;
        assign(sd_noise, nil_index_list(),
          stan::math::sqrt(
            stan::math::exp(
              rvalue(b,
                cons_list(index_omni(),
                  cons_list(index_uni(n_random), nil_index_list())), "b"))),
          "assigning variable sd_noise");
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "sd_noise[sym1__]",
                               sd_noise[(sym1__ - 1)], 0);}
      {
        int pos;
        pos = std::numeric_limits<int>::min();
        
        current_statement__ = 32;
        pos = 1;
        int obs_id;
        obs_id = std::numeric_limits<int>::min();
        
        current_statement__ = 33;
        obs_id = 1;
        current_statement__ = 34;
        validate_non_negative_index("SIGMA", "n_random", n_random);
        current_statement__ = 35;
        validate_non_negative_index("SIGMA", "n_random", n_random);
        Eigen::Matrix<local_scalar_t__, -1, -1> SIGMA;
        SIGMA = Eigen::Matrix<local_scalar_t__, -1, -1>(n_random, n_random);
        stan::math::fill(SIGMA, DUMMY_VAR__);
        
        current_statement__ = 36;
        assign(SIGMA, nil_index_list(), diag_pre_multiply(sd_R, L),
          "assigning variable SIGMA");
        current_statement__ = 37;
        validate_non_negative_index("y_merge", "N_obs", N_obs);
        Eigen::Matrix<local_scalar_t__, -1, 1> y_merge;
        y_merge = Eigen::Matrix<local_scalar_t__, -1, 1>(N_obs);
        stan::math::fill(y_merge, DUMMY_VAR__);
        
        current_statement__ = 39;
        assign(y_merge, nil_index_list(), y, "assigning variable y_merge");
        current_statement__ = 42;
        if (logical_gt(n_miss, 0)) {
          current_statement__ = 40;
          assign(y_merge, cons_list(index_multi(pos_miss), nil_index_list()),
            y_impute, "assigning variable y_merge");
        } 
        current_statement__ = 43;
        lp_accum__.add(
          normal_lpdf<propto__>(gammas,
            rvalue(prior_gamma,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "prior_gamma"),
            rvalue(prior_gamma,
              cons_list(index_omni(),
                cons_list(index_uni(2), nil_index_list())), "prior_gamma")));
        current_statement__ = 44;
        lp_accum__.add(
          cauchy_lpdf<propto__>(sd_R,
            rvalue(prior_sd_R,
              cons_list(index_omni(),
                cons_list(index_uni(1), nil_index_list())), "prior_sd_R"),
            rvalue(prior_sd_R,
              cons_list(index_omni(),
                cons_list(index_uni(2), nil_index_list())), "prior_sd_R")));
        current_statement__ = 45;
        lp_accum__.add(lkj_corr_cholesky_lpdf<propto__>(L, prior_LKJ));
        current_statement__ = 48;
        if (logical_eq(innos_rand, 0)) {
          current_statement__ = 46;
          lp_accum__.add(
            cauchy_lpdf<propto__>(sigma,
              rvalue(prior_sigma,
                cons_list(index_uni(1),
                  cons_list(index_uni(1), nil_index_list())), "prior_sigma"),
              rvalue(prior_sigma,
                cons_list(index_uni(1),
                  cons_list(index_uni(2), nil_index_list())), "prior_sigma")));
        } 
        current_statement__ = 51;
        if (logical_gt(n_cov, 1)) {
          current_statement__ = 49;
          lp_accum__.add(
            normal_lpdf<propto__>(b_re_pred,
              rvalue(prior_b_re_pred,
                cons_list(index_omni(),
                  cons_list(index_uni(1), nil_index_list())),
                "prior_b_re_pred"),
              rvalue(prior_b_re_pred,
                cons_list(index_omni(),
                  cons_list(index_uni(2), nil_index_list())),
                "prior_b_re_pred")));
        } 
        current_statement__ = 56;
        if (logical_gt(n_out, 0)) {
          current_statement__ = 52;
          lp_accum__.add(
            normal_lpdf<propto__>(alpha_out,
              rvalue(prior_alpha_out,
                cons_list(index_omni(),
                  cons_list(index_uni(1), nil_index_list())),
                "prior_alpha_out"),
              rvalue(prior_alpha_out,
                cons_list(index_omni(),
                  cons_list(index_uni(2), nil_index_list())),
                "prior_alpha_out")));
          current_statement__ = 53;
          lp_accum__.add(
            normal_lpdf<propto__>(b_out_pred,
              rvalue(prior_b_out,
                cons_list(index_omni(),
                  cons_list(index_uni(1), nil_index_list())), "prior_b_out"),
              rvalue(prior_b_out,
                cons_list(index_omni(),
                  cons_list(index_uni(2), nil_index_list())), "prior_b_out")));
          current_statement__ = 54;
          lp_accum__.add(
            cauchy_lpdf<propto__>(sigma_out,
              rvalue(prior_sigma_out,
                cons_list(index_omni(),
                  cons_list(index_uni(1), nil_index_list())),
                "prior_sigma_out"),
              rvalue(prior_sigma_out,
                cons_list(index_omni(),
                  cons_list(index_uni(2), nil_index_list())),
                "prior_sigma_out")));
        } 
        current_statement__ = 69;
        for (int pp = 1; pp <= N; ++pp) {
          current_statement__ = 57;
          obs_id = N_obs_id[(pp - 1)];
          current_statement__ = 58;
          lp_accum__.add(
            multi_normal_cholesky_lpdf<propto__>(
              rvalue(b_free,
                cons_list(index_uni(pp),
                  cons_list(index_multi(is_random), nil_index_list())),
                "b_free"),
              rvalue(bmu,
                cons_list(index_uni(pp),
                  cons_list(index_min_max(1, n_random), nil_index_list())),
                "bmu"), SIGMA));
          {
            current_statement__ = 59;
            validate_non_negative_index("mus", "obs_id - 1", (obs_id - 1));
            Eigen::Matrix<local_scalar_t__, -1, 1> mus;
            mus = Eigen::Matrix<local_scalar_t__, -1, 1>((obs_id - 1));
            stan::math::fill(mus, DUMMY_VAR__);
            
            current_statement__ = 61;
            validate_non_negative_index("y_cen", "obs_id", obs_id);
            Eigen::Matrix<local_scalar_t__, -1, 1> y_cen;
            y_cen = Eigen::Matrix<local_scalar_t__, -1, 1>(obs_id);
            stan::math::fill(y_cen, DUMMY_VAR__);
            
            current_statement__ = 63;
            assign(y_cen, nil_index_list(),
              subtract(
                rvalue(y_merge,
                  cons_list(index_min_max(pos, ((pos + obs_id) - 1)),
                    nil_index_list()), "y_merge"),
                rvalue(b,
                  cons_list(index_uni(pp),
                    cons_list(index_uni(1), nil_index_list())), "b")),
              "assigning variable y_cen");
            current_statement__ = 64;
            assign(mus, nil_index_list(),
              add(
                rvalue(b,
                  cons_list(index_uni(pp),
                    cons_list(index_uni(1), nil_index_list())), "b"),
                multiply(
                  rvalue(b,
                    cons_list(index_uni(pp),
                      cons_list(index_uni(2), nil_index_list())), "b"),
                  rvalue(y_cen,
                    cons_list(index_min_max(1, (obs_id - 1)),
                      nil_index_list()), "y_cen"))), "assigning variable mus");
            current_statement__ = 65;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(y_merge,
                  cons_list(index_min_max((pos + 1), (pos + (obs_id - 1))),
                    nil_index_list()), "y_merge"), mus, sd_noise[(pp - 1)]));
          }
          current_statement__ = 67;
          pos = (pos + obs_id);}
        current_statement__ = 80;
        if (logical_gt(n_out, 0)) {
          int k;
          k = std::numeric_limits<int>::min();
          
          current_statement__ = 70;
          k = 1;
          current_statement__ = 71;
          validate_non_negative_index("b_z", "N", N);
          current_statement__ = 72;
          validate_non_negative_index("b_z", "n_random + n_z",
                                      (n_random + n_z));
          Eigen::Matrix<local_scalar_t__, -1, -1> b_z;
          b_z = Eigen::Matrix<local_scalar_t__, -1, -1>(N, (n_random + n_z));
          stan::math::fill(b_z, DUMMY_VAR__);
          
          current_statement__ = 73;
          assign(b_z, nil_index_list(), append_col(b, Z),
            "assigning variable b_z");
          current_statement__ = 78;
          for (int i = 1; i <= n_out; ++i) {
            int n_bs;
            n_bs = std::numeric_limits<int>::min();
            
            current_statement__ = 74;
            n_bs = n_out_bs[(i - 1)][(1 - 1)];
            current_statement__ = 75;
            lp_accum__.add(
              normal_lpdf<propto__>(
                rvalue(out,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "out"),
                add(alpha_out[(i - 1)],
                  multiply(
                    rvalue(b_z,
                      cons_list(index_omni(),
                        cons_list(
                          index_multi(rvalue(n_out_b_pos,
                                        cons_list(index_uni(i),
                                          cons_list(index_min_max(1, n_bs),
                                            nil_index_list())),
                                        "n_out_b_pos")), nil_index_list())),
                      "b_z"), segment(b_out_pred, k, n_bs))),
                sigma_out[(i - 1)]));
            current_statement__ = 76;
            k = (k + n_bs);}
        } 
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_AR_manifest_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<Eigen::Matrix<double, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(n_random));
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 1;
        assign(b_free, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector(n_random), "assigning variable b_free");}
      Eigen::Matrix<double, -1, 1> sd_R;
      sd_R = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      sd_R = in__.vector(n_random);
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sd_R[(sym1__ - 1)], 0),
          "assigning variable sd_R");}
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      sigma = in__.vector(sigma_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> L_in__;
      L_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>(((n_random *
                                                         (n_random - 1)) / 2));
      stan::math::fill(L_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      L_in__ = in__.vector(((n_random * (n_random - 1)) / 2));
      current_statement__ = 4;
      assign(L, nil_index_list(),
        stan::math::cholesky_corr_constrain(L_in__, n_random),
        "assigning variable L");
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      y_impute = in__.vector(n_miss);
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(n_random);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      gammas = in__.row_vector(n_random);
      Eigen::Matrix<double, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<double, -1, 1>(n_cov_bs);
      stan::math::fill(b_re_pred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      b_re_pred = in__.vector(n_cov_bs);
      Eigen::Matrix<double, -1, 1> alpha_out;
      alpha_out = Eigen::Matrix<double, -1, 1>(n_out);
      stan::math::fill(alpha_out, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 8;
      alpha_out = in__.vector(n_out);
      Eigen::Matrix<double, -1, 1> sigma_out;
      sigma_out = Eigen::Matrix<double, -1, 1>(n_out);
      stan::math::fill(sigma_out, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      sigma_out = in__.vector(n_out);
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        current_statement__ = 9;
        assign(sigma_out, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_out[(sym1__ - 1)], 0),
          "assigning variable sigma_out");}
      Eigen::Matrix<double, -1, 1> b_out_pred;
      b_out_pred = Eigen::Matrix<double, -1, 1>(n_out_bs_sum);
      stan::math::fill(b_out_pred, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 10;
      b_out_pred = in__.vector(n_out_bs_sum);
      Eigen::Matrix<double, -1, -1> bmu;
      bmu = Eigen::Matrix<double, -1, -1>(N, n_random);
      stan::math::fill(bmu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> b;
      b = Eigen::Matrix<double, -1, -1>(N, n_pars);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sd_noise;
      sd_noise = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(sd_noise, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> b_re_pred_mat;
      b_re_pred_mat = Eigen::Matrix<double, -1, -1>(n_cov, n_random);
      stan::math::fill(b_re_pred_mat, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          vars__.emplace_back(b_free[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(sd_R[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
        vars__.emplace_back(b_re_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        vars__.emplace_back(alpha_out[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        vars__.emplace_back(sigma_out[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out_bs_sum; ++sym1__) {
        vars__.emplace_back(b_out_pred[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 14;
      assign(b_re_pred_mat, nil_index_list(), rep_matrix(0, n_cov, n_random),
        "assigning variable b_re_pred_mat");
      current_statement__ = 15;
      assign(b_re_pred_mat,
        cons_list(index_uni(1), cons_list(index_omni(), nil_index_list())),
        gammas, "assigning variable b_re_pred_mat");
      current_statement__ = 20;
      if (logical_gt(n_cov, 1)) {
        current_statement__ = 18;
        for (int i = 1; i <= n_cov_bs; ++i) {
          current_statement__ = 16;
          assign(b_re_pred_mat,
            cons_list(index_uni(n_cov_mat[(i - 1)][(1 - 1)]),
              cons_list(index_uni(n_cov_mat[(i - 1)][(2 - 1)]),
                nil_index_list())), b_re_pred[(i - 1)],
            "assigning variable b_re_pred_mat");}
      } 
      current_statement__ = 21;
      assign(bmu, nil_index_list(), multiply(W, b_re_pred_mat),
        "assigning variable bmu");
      current_statement__ = 24;
      for (int i = 1; i <= n_random; ++i) {
        current_statement__ = 22;
        assign(b,
          cons_list(index_omni(),
            cons_list(index_uni(is_random[(i - 1)]), nil_index_list())),
          to_vector(
            rvalue(b_free,
              cons_list(index_omni(),
                cons_list(index_uni(i), nil_index_list())), "b_free")),
          "assigning variable b");}
      current_statement__ = 29;
      if (logical_eq(innos_rand, 0)) {
        current_statement__ = 27;
        assign(sd_noise, nil_index_list(), rep_vector(sigma[(1 - 1)], N),
          "assigning variable sd_noise");
      } else {
        current_statement__ = 25;
        assign(sd_noise, nil_index_list(),
          stan::math::sqrt(
            stan::math::exp(
              rvalue(b,
                cons_list(index_omni(),
                  cons_list(index_uni(n_random), nil_index_list())), "b"))),
          "assigning variable sd_noise");
      }
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "sd_noise[sym1__]",
                               sd_noise[(sym1__ - 1)], 0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(bmu,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "bmu"));}}
        for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            vars__.emplace_back(
              rvalue(b,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "b"));}}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(sd_noise[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            vars__.emplace_back(
              rvalue(b_re_pred_mat,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())),
                "b_re_pred_mat"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, -1> bcorr;
      bcorr = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(bcorr, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 31;
      assign(bcorr, nil_index_list(), multiply_lower_tri_self_transpose(L),
        "assigning variable bcorr");
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(
            rvalue(bcorr,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "bcorr"));}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<Eigen::Matrix<double, -1, 1>> b_free;
      b_free = std::vector<Eigen::Matrix<double, -1, 1>>(N, Eigen::Matrix<double, -1, 1>(n_random));
      stan::math::fill(b_free, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_free_flat__;
        current_statement__ = 1;
        assign(b_free_flat__, nil_index_list(), context__.vals_r("b_free"),
          "assigning variable b_free_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 1;
            assign(b_free,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              b_free_flat__[(pos__ - 1)], "assigning variable b_free");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> sd_R;
      sd_R = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sd_R_flat__;
        current_statement__ = 2;
        assign(sd_R_flat__, nil_index_list(), context__.vals_r("sd_R"),
          "assigning variable sd_R_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 2;
          assign(sd_R, cons_list(index_uni(sym1__), nil_index_list()),
            sd_R_flat__[(pos__ - 1)], "assigning variable sd_R");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sd_R_free__;
      sd_R_free__ = Eigen::Matrix<double, -1, 1>(n_random);
      stan::math::fill(sd_R_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        current_statement__ = 2;
        assign(sd_R_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sd_R[(sym1__ - 1)], 0),
          "assigning variable sd_R_free__");}
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 3;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(n_random, n_random);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> L_flat__;
        current_statement__ = 4;
        assign(L_flat__, nil_index_list(), context__.vals_r("L"),
          "assigning variable L_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            current_statement__ = 4;
            assign(L,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              L_flat__[(pos__ - 1)], "assigning variable L");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      Eigen::Matrix<double, -1, 1> L_free__;
      L_free__ = Eigen::Matrix<double, -1, 1>(((n_random * (n_random - 1)) /
                                                2));
      stan::math::fill(L_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(L_free__, nil_index_list(), stan::math::cholesky_corr_free(L),
        "assigning variable L_free__");
      Eigen::Matrix<double, -1, 1> y_impute;
      y_impute = Eigen::Matrix<double, -1, 1>(n_miss);
      stan::math::fill(y_impute, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_impute_flat__;
        current_statement__ = 5;
        assign(y_impute_flat__, nil_index_list(),
          context__.vals_r("y_impute"), "assigning variable y_impute_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
          current_statement__ = 5;
          assign(y_impute, cons_list(index_uni(sym1__), nil_index_list()),
            y_impute_flat__[(pos__ - 1)], "assigning variable y_impute");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, 1, -1> gammas;
      gammas = Eigen::Matrix<double, 1, -1>(n_random);
      stan::math::fill(gammas, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gammas_flat__;
        current_statement__ = 6;
        assign(gammas_flat__, nil_index_list(), context__.vals_r("gammas"),
          "assigning variable gammas_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
          current_statement__ = 6;
          assign(gammas, cons_list(index_uni(sym1__), nil_index_list()),
            gammas_flat__[(pos__ - 1)], "assigning variable gammas");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> b_re_pred;
      b_re_pred = Eigen::Matrix<double, -1, 1>(n_cov_bs);
      stan::math::fill(b_re_pred, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_re_pred_flat__;
        current_statement__ = 7;
        assign(b_re_pred_flat__, nil_index_list(),
          context__.vals_r("b_re_pred"),
          "assigning variable b_re_pred_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
          current_statement__ = 7;
          assign(b_re_pred, cons_list(index_uni(sym1__), nil_index_list()),
            b_re_pred_flat__[(pos__ - 1)], "assigning variable b_re_pred");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_out;
      alpha_out = Eigen::Matrix<double, -1, 1>(n_out);
      stan::math::fill(alpha_out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_out_flat__;
        current_statement__ = 8;
        assign(alpha_out_flat__, nil_index_list(),
          context__.vals_r("alpha_out"),
          "assigning variable alpha_out_flat__");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
          current_statement__ = 8;
          assign(alpha_out, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_out_flat__[(pos__ - 1)], "assigning variable alpha_out");
          current_statement__ = 8;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_out;
      sigma_out = Eigen::Matrix<double, -1, 1>(n_out);
      stan::math::fill(sigma_out, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_out_flat__;
        current_statement__ = 9;
        assign(sigma_out_flat__, nil_index_list(),
          context__.vals_r("sigma_out"),
          "assigning variable sigma_out_flat__");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
          current_statement__ = 9;
          assign(sigma_out, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_out_flat__[(pos__ - 1)], "assigning variable sigma_out");
          current_statement__ = 9;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_out_free__;
      sigma_out_free__ = Eigen::Matrix<double, -1, 1>(n_out);
      stan::math::fill(sigma_out_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        current_statement__ = 9;
        assign(sigma_out_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_out[(sym1__ - 1)], 0),
          "assigning variable sigma_out_free__");}
      Eigen::Matrix<double, -1, 1> b_out_pred;
      b_out_pred = Eigen::Matrix<double, -1, 1>(n_out_bs_sum);
      stan::math::fill(b_out_pred, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_out_pred_flat__;
        current_statement__ = 10;
        assign(b_out_pred_flat__, nil_index_list(),
          context__.vals_r("b_out_pred"),
          "assigning variable b_out_pred_flat__");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= n_out_bs_sum; ++sym1__) {
          current_statement__ = 10;
          assign(b_out_pred, cons_list(index_uni(sym1__), nil_index_list()),
            b_out_pred_flat__[(pos__ - 1)], "assigning variable b_out_pred");
          current_statement__ = 10;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          vars__.emplace_back(b_free[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(sd_R_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ((n_random * (n_random - 1)) / 2);
           ++sym1__) { vars__.emplace_back(L_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
        vars__.emplace_back(y_impute[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        vars__.emplace_back(gammas[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
        vars__.emplace_back(b_re_pred[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        vars__.emplace_back(alpha_out[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
        vars__.emplace_back(sigma_out_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n_out_bs_sum; ++sym1__) {
        vars__.emplace_back(b_out_pred[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("b_free");
    names__.emplace_back("sd_R");
    names__.emplace_back("sigma");
    names__.emplace_back("L");
    names__.emplace_back("y_impute");
    names__.emplace_back("gammas");
    names__.emplace_back("b_re_pred");
    names__.emplace_back("alpha_out");
    names__.emplace_back("sigma_out");
    names__.emplace_back("b_out_pred");
    names__.emplace_back("bmu");
    names__.emplace_back("b");
    names__.emplace_back("sd_noise");
    names__.emplace_back("b_re_pred_mat");
    names__.emplace_back("bcorr");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_miss)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_cov_bs)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_out)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_out)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(n_out_bs_sum)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N),
                                             static_cast<size_t>(n_pars)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_cov),
                                             static_cast<size_t>(n_random)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_random),
                                             static_cast<size_t>(n_random)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_re_pred" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_out" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_out" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out_bs_sum; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_out_pred" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sd_noise" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_re_pred_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "b_free" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sd_R" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ((n_random * (n_random - 1)) / 2);
         ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_miss; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "y_impute" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gammas" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_cov_bs; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_re_pred" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_out" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_out" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n_out_bs_sum; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "b_out_pred" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bmu" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n_pars; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sd_noise" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_cov; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "b_re_pred_mat" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_random; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_random; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "bcorr" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_random << "}},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"b_re_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_cov_bs << "},\"block\":\"parameters\"},{\"name\":\"alpha_out\",\"type\":{\"name\":\"vector\",\"length\":" << n_out << "},\"block\":\"parameters\"},{\"name\":\"sigma_out\",\"type\":{\"name\":\"vector\",\"length\":" << n_out << "},\"block\":\"parameters\"},{\"name\":\"b_out_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_out_bs_sum << "},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_pars << "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"b_re_pred_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"b_free\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"vector\",\"length\":" << n_random << "}},\"block\":\"parameters\"},{\"name\":\"sd_R\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"vector\",\"length\":" << ((n_random * (n_random - 1)) / 2) << "},\"block\":\"parameters\"},{\"name\":\"y_impute\",\"type\":{\"name\":\"vector\",\"length\":" << n_miss << "},\"block\":\"parameters\"},{\"name\":\"gammas\",\"type\":{\"name\":\"vector\",\"length\":" << n_random << "},\"block\":\"parameters\"},{\"name\":\"b_re_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_cov_bs << "},\"block\":\"parameters\"},{\"name\":\"alpha_out\",\"type\":{\"name\":\"vector\",\"length\":" << n_out << "},\"block\":\"parameters\"},{\"name\":\"sigma_out\",\"type\":{\"name\":\"vector\",\"length\":" << n_out << "},\"block\":\"parameters\"},{\"name\":\"b_out_pred\",\"type\":{\"name\":\"vector\",\"length\":" << n_out_bs_sum << "},\"block\":\"parameters\"},{\"name\":\"bmu\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"matrix\",\"rows\":" << N << ",\"cols\":" << n_pars << "},\"block\":\"transformed_parameters\"},{\"name\":\"sd_noise\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"},{\"name\":\"b_re_pred_mat\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_cov << ",\"cols\":" << n_random << "},\"block\":\"transformed_parameters\"},{\"name\":\"bcorr\",\"type\":{\"name\":\"matrix\",\"rows\":" << n_random << ",\"cols\":" << n_random << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_AR_manifest_namespace::model_AR_manifest;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_AR_manifest_namespace::profiles__;
}
#endif
#endif
